<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="12/4/2023 8:38:19 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="LAPTOP-I0N0R4UT"
  DTS:CreatorName="LAPTOP-I0N0R4UT\Lenovo"
  DTS:DTSID="{6A048A62-1690-4928-BAE7-EB49A5986300}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5270.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package1"
  DTS:PackageType="5"
  DTS:VersionBuild="65"
  DTS:VersionGUID="{D713E035-8E58-4E33-9DE8-DD04385E18C0}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[(local).BI_Stage]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{5A23E2C8-F909-4A20-8D8E-3C6AD9E6C926}"
      DTS:ObjectName="(local).BI_Stage">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=(local);Initial Catalog=BI_Stage;Provider=SQLNCLI11.1;Integrated Security=SSPI;Application Name=SSIS-Package1-{5A23E2C8-F909-4A20-8D8E-3C6AD9E6C926}(local).BI_Stage;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[(local).master]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{879D59A5-9918-4EF8-B228-7E658F788200}"
      DTS:ObjectName="(local).master">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=(local);Initial Catalog=master;Provider=SQLNCLI11.1;Integrated Security=SSPI;Application Name=SSIS-Package1-{879D59A5-9918-4EF8-B228-7E658F788200}(local).master;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Excel Connection Manager]"
      DTS:CreationName="EXCEL"
      DTS:DTSID="{B4B08074-76D1-45B1-B77E-CB7E973AC58A}"
      DTS:ObjectName="Excel Connection Manager">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="0"
          DTS:ConnectRetryInterval="0"
          DTS:ConnectionString="Provider=Microsoft.ACE.OLEDB.16.0;Data Source=D:\BI\DATH\supermarket_sales.xls;Extended Properties=&quot;EXCEL 12.0 XML;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Re-SetUp Databases and Tables"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{2DDB611D-3289-4E2A-8019-0DB900638D28}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Re-SetUp Databases and Tables"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_3c51a2f841134ab69cc114d847bd6b03"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_3c51a2f841134ab69cc114d847bd6b03.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{7DED22C1-1F83-4B02-894B-C2E57D111CAD}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_3c51a2f841134ab69cc114d847bd6b03</RootNamespace>
    <AssemblyName>ST_3c51a2f841134ab69cc114d847bd6b03</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Xml;
using System.Collections.Generic;
using System.Data.SqlClient;
#endregion

namespace ST_3c51a2f841134ab69cc114d847bd6b03
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 

        public enum HandleSqlConnection
        {
            OpenAndClose,
            OpenAndKeep
        }
        public enum HandleExistence
        {
            DoNothing,
            Truncate,
            Delete
        }
        public enum DeleteMethod
        {
            Truncate,
            Delete
        }

        class UnityFunction
        {
            public static HandleExistence fFormatExistedHandler(string method)
            {
                method = method.ToLower();
                switch (method)
                {
                    case "donothing":
                        return HandleExistence.DoNothing;
                    case "truncate":
                        return HandleExistence.Truncate;
                    case "delete":
                        return HandleExistence.Delete;
                    default:
                        throw new ArgumentException("method doesn't exist");
                }
            }
            public static bool fDatabaseExisted(ref SqlConnection connection, string databaseName, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                // Check the connection state and open it if closed.
                var currentConnectionState = connection.State;
                if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                // Check db existence
                string queryCheckDBExistence = $"SELECT COUNT(*) FROM sys.databases WHERE name = '{databaseName}'";
                int databaseCount = 0;
                using (SqlCommand command = new SqlCommand(queryCheckDBExistence, connection)) { databaseCount = (int)command.ExecuteScalar(); }

                // change back to current connection state or new connect state based on ConnectionOption
                if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }
                return databaseCount > 0;
            }

            public static bool fTableExistedInDatabase(ref SqlConnection connection, string databaseName, string tableName, bool? AdreadyCheckDBIsExistedResult = null, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                // Check the connection state and open it if closed.
                var currentConnectionState = connection.State;
                if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                // Check db existence
                bool dbIsExited = AdreadyCheckDBIsExistedResult ?? fDatabaseExisted(ref connection, databaseName);
                if (!dbIsExited) { throw new ArgumentException($"{databaseName} not existed"); }

                // Check table existed
                string checkTableIsExistedQuery = $"SELECT COUNT(*) FROM {databaseName}.INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '{tableName}'";
                int tableIsExistedQuery = 0;
                using (SqlCommand command = new SqlCommand(checkTableIsExistedQuery, connection)) { tableIsExistedQuery = Convert.ToInt32(command.ExecuteScalar()); }

                // Change back to current connection state or new connect state based on ConnectionOption
                if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }

                return tableIsExistedQuery > 0;
            }

            public static void fDeleteTableInDatabase(ref SqlConnection connection, string databaseName, string tableName, DeleteMethod method = DeleteMethod.Truncate, bool? AdreadyCheckDBIsExistedResult = null, bool? AdreadyCheckTableIsExistedResult = null, bool ChangeDatabaseCurrentlyUse = false, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                // Check the connection state and open it if closed.
                var currentConnectionState = connection.State;
                if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                // Check db existence and table existed (will be checked in fTableExistedInDatabase)
                bool tableIsExisted = AdreadyCheckTableIsExistedResult ?? fTableExistedInDatabase(ref connection, databaseName, tableName, AdreadyCheckDBIsExistedResult, HandleSqlConnection.OpenAndKeep);

                // Change db context:
                string DBCurrentlyUsing;
                string queryGetDBCurrentlyUsing = $"SELECT DB_NAME()";
                using (SqlCommand command = new SqlCommand(queryGetDBCurrentlyUsing, connection)) { DBCurrentlyUsing = command.ExecuteScalar().ToString(); }
                if (queryGetDBCurrentlyUsing != databaseName)
                {
                    string queryChangeDatabaseConnection = $"USE {databaseName}";
                    using (SqlCommand command = new SqlCommand(queryChangeDatabaseConnection, connection)) { command.ExecuteNonQuery(); }
                }

                // return if table not existed
                if (tableIsExisted) { Console.WriteLine($"[{databaseName}].[dbo].[{tableName}] not existed"); return; }

                // Find table and ref table
                List<string> EffectedTable = new List<string>();

                Queue<string> tbNames = new Queue<string>();
                tbNames.Enqueue(tableName);
                while (tbNames.Count > 0)
                {
                    string currentTableName = tbNames.Dequeue();
                    EffectedTable.Add(currentTableName);
                    string query = @"
                        SELECT
                            fk.name AS ForeignKeyName,
                            tp.name AS TableName,
                            cp.name AS ColumnName
                        FROM
                            sys.foreign_keys AS fk
                        INNER JOIN
                            sys.tables AS tp ON fk.parent_object_id = tp.object_id
                        INNER JOIN
                            sys.tables AS tr ON fk.referenced_object_id = tr.object_id
                        INNER JOIN
                            sys.foreign_key_columns AS fkc ON fk.object_id = fkc.constraint_object_id
                        INNER JOIN
                            sys.columns AS cp ON fkc.parent_column_id = cp.column_id AND fkc.parent_object_id = cp.object_id
                        INNER JOIN
                            sys.columns AS cr ON fkc.referenced_column_id = cr.column_id AND fkc.referenced_object_id = cr.object_id
                        WHERE
                            tr.name = @TableName";
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@TableName", tableName);
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                string referencingTableName = reader["TableName"].ToString();
                                if (!EffectedTable.Contains(referencingTableName) && !tbNames.Contains(referencingTableName))
                                {
                                    tbNames.Enqueue(referencingTableName);
                                }
                            }
                        }
                    }
                }

                //Console.WriteLine(string.Join(", ", EffectedTable));

                // Delete or truncate tables
                string queryDeleteOrTruncate = $"{(method == DeleteMethod.Truncate ? "TRUNCATE TABLE " : "DELETE FROM ")}";
                for (int iterater = EffectedTable.Count - 1; iterater >= 0; iterater--)
                {
                    string query = queryDeleteOrTruncate + EffectedTable[iterater];
                    using (SqlCommand command = new SqlCommand(query, connection)) { command.ExecuteScalar(); }
                }

                // Change back to original db
                if (!ChangeDatabaseCurrentlyUse) { using (SqlCommand command = new SqlCommand($"USE {DBCurrentlyUsing}", connection)) { command.ExecuteNonQuery(); } }

                // change back to current connection state or new connect state based on ConnectionOption
                if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }
            }

            public static void fCreateTableInDatabase(ref SqlConnection connection, string databaseName, string tableName, string createTableQuery, HandleExistence method = HandleExistence.Truncate, bool? AdreadyCheckDBIsExistedResult = null, bool? AdreadyCheckTableIsExistedResult = null, bool ChangeDatabaseCurrentlyUse = false, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                // Check the connection state and open it if closed.
                var currentConnectionState = connection.State;
                if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                // Check db existence and table existed (will be checked in fTableExistedInDatabase)
                bool tableIsExisted = AdreadyCheckTableIsExistedResult ?? fTableExistedInDatabase(ref connection, databaseName, tableName, AdreadyCheckDBIsExistedResult, HandleSqlConnection.OpenAndKeep);

                // Change db context:
                string DBCurrentlyUsing;
                string queryGetDBCurrentlyUsing = $"SELECT DB_NAME()";
                using (SqlCommand command = new SqlCommand(queryGetDBCurrentlyUsing, connection)) { DBCurrentlyUsing = command.ExecuteScalar().ToString(); }
                if (queryGetDBCurrentlyUsing != databaseName)
                {
                    string queryChangeDatabaseConnection = $"USE {databaseName}";
                    using (SqlCommand command = new SqlCommand(queryChangeDatabaseConnection, connection)) { command.ExecuteNonQuery(); }
                }

                // Delete or Trucate existed table
                if (tableIsExisted)
                {
                    switch (method)
                    {
                        case HandleExistence.DoNothing:
                            Console.WriteLine($"[{databaseName}].[{tableName}] existed and how to handle existed is DoNothing so there aren't action to take");
                            return;
                        case HandleExistence.Truncate:
                            fDeleteTableInDatabase(ref connection, databaseName, tableName, DeleteMethod.Truncate, AdreadyCheckDBIsExistedResult, tableIsExisted, false, HandleSqlConnection.OpenAndKeep);
                            Console.WriteLine($"[{databaseName}].[{tableName}] has been truncated");
                            return;
                        case HandleExistence.Delete:
                            fDeleteTableInDatabase(ref connection, databaseName, tableName, DeleteMethod.Delete, AdreadyCheckDBIsExistedResult, tableIsExisted, false, HandleSqlConnection.OpenAndKeep);
                            break;
                    }
                }
                // Create table
                using (SqlCommand command = new SqlCommand(createTableQuery, connection)) { command.ExecuteScalar(); }


                // Change back to original db
                if (!ChangeDatabaseCurrentlyUse) { using (SqlCommand command = new SqlCommand($"USE {DBCurrentlyUsing}", connection)) { command.ExecuteNonQuery(); } }

                // change back to current connection state or new connect state based on ConnectionOption
                if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }

            }

            public static bool fTriggerExistedInDatabase(ref SqlConnection connection, string databaseName, string triggerName, bool? AdreadyCheckDBIsExistedResult = null, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                // Check the connection state and open it if closed.
                var currentConnectionState = connection.State;
                if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                // Check db existence
                bool dbIsExited = AdreadyCheckDBIsExistedResult ?? fDatabaseExisted(ref connection, databaseName);
                if (!dbIsExited) { throw new ArgumentException($"{databaseName} not existed"); }

                // Check table existed
                string checkTriggerQuery = $"SELECT COUNT(*) FROM {databaseName}.sys.triggers WHERE name = '{triggerName}'";
                int triggerIsExisted = 0;
                using (SqlCommand command = new SqlCommand(checkTriggerQuery, connection)) { triggerIsExisted = Convert.ToInt32(command.ExecuteScalar()); }

                // Change back to current connection state or new connect state based on ConnectionOption
                if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }

                return triggerIsExisted > 0;
            }

            public static void fDeleteTriggerInDatabase(ref SqlConnection connection, string databaseName, string triggerName, bool? AdreadyCheckDBIsExistedResult = null, bool? AdreadyCheckTriggerIsExistedResult = null, bool ChangeDatabaseCurrentlyUse = false, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                // Check the connection state and open it if closed.
                var currentConnectionState = connection.State;
                if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                // Check db existence and trigger existed (will be checked in fTriggerExistedInDatabase)
                bool triggerIsExisted = AdreadyCheckTriggerIsExistedResult ?? fTriggerExistedInDatabase(ref connection, databaseName, triggerName, AdreadyCheckDBIsExistedResult, HandleSqlConnection.OpenAndKeep);

                // Change db context:
                string DBCurrentlyUsing;
                string queryGetDBCurrentlyUsing = $"SELECT DB_NAME()";
                using (SqlCommand command = new SqlCommand(queryGetDBCurrentlyUsing, connection)) { DBCurrentlyUsing = command.ExecuteScalar().ToString(); }
                if (queryGetDBCurrentlyUsing != databaseName)
                {
                    string queryChangeDatabaseConnection = $"USE {databaseName}";
                    using (SqlCommand command = new SqlCommand(queryChangeDatabaseConnection, connection)) { command.ExecuteNonQuery(); }
                }

                // return if table not existed
                if (triggerIsExisted) { Console.WriteLine($"[{databaseName}].[dbo].[{triggerName}] not existed"); return; }

                // Delete trigger
                string deleteTriggerQuery = $"DROP TRIGGER {triggerName}"; ;
                using (SqlCommand command = new SqlCommand(deleteTriggerQuery, connection)) { command.ExecuteScalar(); }

                // Change back to original db
                if (!ChangeDatabaseCurrentlyUse) { using (SqlCommand command = new SqlCommand($"USE {DBCurrentlyUsing}", connection)) { command.ExecuteNonQuery(); } }

                // change back to current connection state or new connect state based on ConnectionOption
                if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }
            }

            public static void fCreateTriggerInDatabase(ref SqlConnection connection, string databaseName, string triggerName, string createTriggerQuery, HandleExistence method = HandleExistence.Delete, bool? AdreadyCheckDBIsExistedResult = null, bool? AdreadyCheckTriggerIsExistedResult = null, bool ChangeDatabaseCurrentlyUse = false, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                // Check the connection state and open it if closed.
                var currentConnectionState = connection.State;
                if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                // Check db existence and trigger existed (will be checked in fTriggerExistedInDatabase)
                bool triggerIsExisted = AdreadyCheckTriggerIsExistedResult ?? fTriggerExistedInDatabase(ref connection, databaseName, triggerName, AdreadyCheckDBIsExistedResult, HandleSqlConnection.OpenAndKeep);

                // Change db context:
                string DBCurrentlyUsing;
                string queryGetDBCurrentlyUsing = $"SELECT DB_NAME()";
                using (SqlCommand command = new SqlCommand(queryGetDBCurrentlyUsing, connection)) { DBCurrentlyUsing = command.ExecuteScalar().ToString(); }
                if (queryGetDBCurrentlyUsing != databaseName)
                {
                    string queryChangeDatabaseConnection = $"USE {databaseName}";
                    using (SqlCommand command = new SqlCommand(queryChangeDatabaseConnection, connection)) { command.ExecuteNonQuery(); }
                }

                // Delete or Trucate existed table
                if (triggerIsExisted)
                {
                    switch (method)
                    {
                        case HandleExistence.DoNothing:
                            Console.WriteLine($"[{databaseName}].[{triggerName}] existed and how to handle existed is DoNothing so there aren't action to take");
                            return;
                        case HandleExistence.Truncate:
                            throw new ArgumentException("Can not truncate trigger");
                        case HandleExistence.Delete:
                            string deleteTriggerQuery = $"DROP TRIGGER {triggerName}"; ;
                            using (SqlCommand command = new SqlCommand(deleteTriggerQuery, connection)) { command.ExecuteScalar(); }
                            break;
                    }
                }
                // Create trigger
                using (SqlCommand command = new SqlCommand(createTriggerQuery, connection)) { command.ExecuteScalar(); }

                // Change back to original db
                if (!ChangeDatabaseCurrentlyUse) { using (SqlCommand command = new SqlCommand($"USE {DBCurrentlyUsing}", connection)) { command.ExecuteNonQuery(); } }

                // change back to current connection state or new connect state based on ConnectionOption
                if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }

            }
        }
        public void Main()
		{
            try
            {
                // TODO: Add your code here
                // > Specified variables:
                string configFilePath = @"D:\BI\DATH\Config.xml";
                // > Script:

                // >> Load Condfig
                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.Load(configFilePath);
                string connectionString = xmlDoc.SelectSingleNode("/Root/SQLServerConnnectionString").InnerText;
                XmlNodeList databaseNodes = xmlDoc.SelectNodes("/Root/Databases/Database");


                HandleExistence DatabaseExistenceHandleMethod = UnityFunction.fFormatExistedHandler(xmlDoc.SelectSingleNode("/Root/HandleExistedMethod/Database").InnerText);
                HandleExistence DatabaseTableExistenceHandleMethod = UnityFunction.fFormatExistedHandler(xmlDoc.SelectSingleNode("/Root/HandleExistedMethod/Table").InnerText);
                HandleExistence DatabaseTriggerExistenceHandleMethod = UnityFunction.fFormatExistedHandler(xmlDoc.SelectSingleNode("/Root/HandleExistedMethod/Trigger").InnerText);

                // >> Handle:
                SqlConnection connection = new SqlConnection(connectionString);

                //UnityFunction.fDeleteTableFunc(ref connection, "AdventureWorks2012", "product", " ", HandleExistence.Delete);

                foreach (XmlNode databaseNode in databaseNodes)
                {
                    string databaseName = databaseNode.SelectSingleNode("Name").InnerText;

                    if (connection.State != ConnectionState.Open) connection.Open();
                    // ---- CREATE DATABASE ----:
                    // CREATE DATABASE - step 1: check db existence
                    bool databaseExisted = UnityFunction.fDatabaseExisted(ref connection, databaseName);

                    // CREATE DATABASE - step 2: handle existence and create db
                    if (databaseExisted && DatabaseExistenceHandleMethod == HandleExistence.Delete)
                    {
                        // CREATE DATABASE - step 2.1: drop db
                        string queryDBExistenceHandle = $"DROP DATABASE {databaseName}";
                        using (SqlCommand command = new SqlCommand(queryDBExistenceHandle, connection)) { command.ExecuteScalar(); }
                        databaseExisted = false;
                    }
                    // CREATE DATABASE - step 2.2: create db
                    if (!databaseExisted)
                    {
                        string queryDBCreation = $"CREATE DATABASE {databaseName}";
                        using (SqlCommand command = new SqlCommand(queryDBCreation, connection)) { command.ExecuteScalar(); }
                        databaseExisted = true;
                    }

                    // ---- CREATE METATABLE FOR DB ----:
                    XmlNodeList MetaTables = databaseNode.SelectNodes("MetaTables/Table");
                    if (MetaTables != null)
                    {
                        foreach (XmlNode table in MetaTables)
                        {
                            string tableName = table.SelectSingleNode("Name").InnerText;
                            string createTableQuery = table.SelectSingleNode("CreationQuery").InnerText;
                            UnityFunction.fCreateTableInDatabase(ref connection, databaseName, tableName, createTableQuery, DatabaseTableExistenceHandleMethod, true, false, true, HandleSqlConnection.OpenAndKeep);
                        }
                    }
                    // ---- CREATE TRIGGER FOR DB ----:
                    XmlNodeList Triggers = databaseNode.SelectNodes("TriggerOnDatabase/Trigger");
                    if (Triggers != null)
                    {
                        foreach (XmlNode trigger in Triggers)
                        {
                            string tableName = trigger.SelectSingleNode("Name").InnerText;
                            string createTriggerQuery = trigger.SelectSingleNode("CreationQuery").InnerText;
                            UnityFunction.fCreateTriggerInDatabase(ref connection, databaseName, tableName, createTriggerQuery, DatabaseTriggerExistenceHandleMethod, true, false, true, HandleSqlConnection.OpenAndKeep);
                        }
                    }
                    // ---- CREATE TABLE FOR DB ----:
                    XmlNodeList Tables = databaseNode.SelectNodes("Tables/Table");
                    if (Tables != null)
                    {
                        foreach (XmlNode table in Tables)
                        {
                            string tableName = table.SelectSingleNode("Name").InnerText;
                            string createTableQuery = table.SelectSingleNode("CreationQuery").InnerText;
                            UnityFunction.fCreateTableInDatabase(ref connection, databaseName, tableName, createTableQuery, DatabaseTableExistenceHandleMethod, true, false, true, HandleSqlConnection.OpenAndKeep);
                        }
                    }
                }
                //Dts.Variables["User::ConfigInfo"].Value = databaseStructure;
                if (connection.State == ConnectionState.Open) { connection.Close(); }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
           }
            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_3c51a2f841134ab69cc114d847bd6b03</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_3c51a2f841134ab69cc114d847bd6b03</msb:DisplayName>
    <msb:ProjectId>{C5EC031A-96DE-4AF1-AB46-9C64EB5F3CD1}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_3c51a2f841134ab69cc114d847bd6b03.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:Breakpoint Include="d0c45232ab1e4d7aa91bd721f0ac9c4c">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>17</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>484</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Settings.get_Default():ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Sett" +
    "ings")]

namespace ST_3c51a2f841134ab69cc114d847bd6b03.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_3c51a2f841134ab69cc114d847bd6b03")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_3c51a2f841134ab69cc114d847bd6b03")]
[assembly: AssemblyCopyright("Copyright @  2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_3c51a2f841134ab69cc114d847bd6b03.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_3c51a2f841134ab69cc114d847bd6b03.dll">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
RAAAABAhAAA4AwAAI0Jsb2IAAAAAAAAAAgAAAVcdogkJAwAAAPoBMwAWAAABAAAAMgAAAAkAAAAQ
AAAAEgAAADAAAABIAAAAIQAAABAAAAAGAAAAAgAAAAMAAAAEAAAABAAAAAEAAAAFAAAAAQAAAAUA
AAAAAEoFAQAAAAAABgDQA0MHBgBfBEMHBgAcAzAHDwC3BwAABgBJA9gFBgCzA9gFBgCUA9gFBgBG
BNgFBgDwA9gFBgAJBNgFBgBgA9gFBgB7A7cECgAkBPkECgDKAfkEDgAwCXIFEgAUBvAIBgAJBxMI
DgABAXIFBgABAIYFEgCxAPAIBgAVAYYFBgBeBoYFBgCNBYYFBgBaCIYFEgDNAlgABgAUAG0AFgAM
AG0AEgCuBvAIBgD/AjAHBgDOBmMHBgB7BsMFFgC4AjQFFgAwAzQFFgDmAa4FBgDkAkMHDgAGCXIF
EgABBmgGBgDTBIYFEgCnAGgGCgAiBfkEBgB6AYYFBgAhAYYFBgBXCdgFBgBWBoYFBgAdAIYFBgAo
CYYFBgBFAYYFEgDqBfAIEgD0BvAIEgChBmgGAAAAAEcAAAAAAAEAAQABABAAowUjADkAAQABAAAA
EABqB9IHYQABAAMAAAEQAAEI0geJAAMABwACAQAADgYAAF0ABAAKAAIBAADgAAAAXQAHAAoAAgEA
ALwAAABdAAsACgADABAALQYAAGEADgAKAAMBAABFCAAAXQAOABMAEQCSBbMBEQCfAbcBEQDQALsB
BgZQAL8BVoCQAsIBVoCHBsIBBgZQAL8BVoCtBMYBVoClAsYBVoDdAsYBBgZQAL8BVoClAsoBVoDd
AsoBBgZQAL8BVoA1CM4BVoB/Ac4BUCAAAAAAhgCpBQYAAQA4JAAAAACGGCMHBgABAEAkAAAAAIMY
IwcGAAEASCQAAAAAkwjKBtIBAQB0JAAAAACTCIcB1wEBAHskAAAAAJMIkwHcAQEAgyQAAAAAlghh
COIBAgCKJAAAAACGGCMHBgACAJIkAAAAAJEYKQfnAQIAoCQAAAAAlgDeBusBAgDwJAAAAACWAJYA
8QEDAIQlAAAAAJYA/gH/AQYAcCYAAAAAlgBHAhMCCwAQKQAAAACWADACLwITABgrAAAAAJYAFgL/
ARwABCwAAAAAlgB3AkwCIQCYLQAAAACWAF4CLwIoAEAkAAAAAIYYIwcGADEAAAABAKcEAAABAMkA
AAABACIGAAACAFcBEBADADsGAAABACIGAAACAFcBAAADAE0BEBAEAH8IEBAFADsGAAABACIGAAAC
AFcBAAADAE0BEBAEAMkAEBAFAH8IEBAGAJ0IEBAHAK8BEBAIADsGAAABACIGAAACAFcBAAADAE0B
AAAEAGAJEBAFAMkAEBAGAH8IEBAHAJ0IEBAIAK8BEBAJADsGAAABACIGAAACAFcBAAADAGQBEBAE
AH8IEBAFADsGAAABACIGAAACAFcBAAADAGQBEBAEAH8IEBAFAL4IEBAGAK8BEBAHADsGAAABACIG
AAACAFcBAAADAGQBAAAEAIEJEBAFAMkAEBAGAH8IEBAHAL4IEBAIAK8BEBAJADsGCQAjBwEAEQAj
BwYAGQAjBwoAKQAjBxAAMQAjBxAAOQAjBxAAQQAjBxAASQAjBxAAUQAjBxAAWQAjBxAAYQAjBxAA
aQAjBwYA6QAjBwYACQEjBxUAGQEjBwYAIQEjBwYAIQGNABAAkQDwAEsAkQBFCVEAkQDGB1UAgQAj
BxAAeQAVB1sAiQASCWAAKQGuAmQAKQGeBQYAMQFTCHAAoQAjB3YAOQGTBmAAqQCdAgYAFAAjB4MA
DAAjB4MAiQA8CYkAKQGXAgYAsQAJAVEAsQAjBxAAcQA9CI0AQQHhCAEAcQAjBwYAwQAjBwYASQEz
AZMASQFTCZwA8QAjB6IAEQEjBwYAMQEBB1EAMQGUCaoAYQEjBxAAMQFTCMAADACaBIkADABtCMcA
FACaBIkAFABtCMcAMQFTCOEAcQEbAOcAwQDRBFEAMQGgCaoAOQFxCRsBeQFwAR8BHAAjBwYAJAAj
BwYAJACFBIMAJAB9BMcAHACSAIMAoQAmCDABgQGNBDYBoQC8Bj4BkQF9BUMBHAAKCEgBJAAKCEgB
kQGIAIkAJAAeCRsBHAAeCRsBHAB9BU4BCAAUAKIBEgAVAKIBCAAYAKcBCAAgAKIBCAAkAKcBEgAl
AKIBCAAoAKwBEgApAKIBCAAwAKIBCAA0AKcBCAA5AKIBCAA8AKIBEgA9AKIBCABAAKcBEgBBAKIB
AgBFALEBEgBJAKIBCABdAKcBEgBhAKIBEgBlAKIBAgBpALEBEgBtAKIBEgB9AKIBEgCBAKIBEgCR
AKIBEgCVAKIBAgCZALEBEgCdAKIBCACxAKwBEgC1AKIBEgC5AKIBAgC9ALEBEgDBAKIBKQBzAJ0C
LgALAHUCLgATAH4CLgAbAJ0CLgAjAKYCLgArAM8CLgAzAM8CLgA7AM8CLgBDAKYCLgBLANUCLgBT
AM8CLgBbAOwCQwBjAKcBSQBzAJ0CYQB7AKcBYwBrAKcBHACwAMwA7ABUAXEBAwABAAQAAwAAAM4G
ZgIAAKcBawIAAHcIcAICAAQAAwACAAUABQABAAYABQACAAcABwBpAH0AJAEqAQSAAAABAAAAKCIy
aQAAAAAAACMAAAAEAAAAAAAAAAAAAACQAWQAAAAAABAAAAAAAAAAAAAAAJkB2gQAAAAABAAAAAAA
AAAAAAAAkAFyBQAAAAAEAAAAAAAAAAAAAACQAVgAAAAAAAQAAAAAAAAAAAAAAJABhgUAAAAAAAAA
AAEAAAB0BwAABQACAAYAAgAHAAIACAACAAkAAgAAAABOdWxsYWJsZWAxAFF1ZXVlYDEATGlzdGAx
AFRvSW50MzIAU1RfM2M1MWEyZjg0MTEzNGFiNjljYzExNGQ4NDdiZDZiMDMAPE1vZHVsZT4AdmFs
dWVfXwBTeXN0ZW0uRGF0YQBtc2NvcmxpYgBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBSZWFk
AExvYWQAQWRkAGZEYXRhYmFzZUV4aXN0ZWQARGJDb21tYW5kAFNxbENvbW1hbmQARGVsZXRlTWV0
aG9kAG1ldGhvZABkZWZhdWx0SW5zdGFuY2UASGFuZGxlRXhpc3RlbmNlAFNlbGVjdFNpbmdsZU5v
ZGUAWG1sTm9kZQBnZXRfTWVzc2FnZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRU
eXBlRnJvbUhhbmRsZQBDb25zb2xlAHRhYmxlTmFtZQBkYXRhYmFzZU5hbWUAdHJpZ2dlck5hbWUA
V3JpdGVMaW5lAFR5cGUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1
bHR1cmUAQ2hhbmdlRGF0YWJhc2VDdXJyZW50bHlVc2UAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxC
YXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAGZUYWJsZUV4aXN0ZWRJbkRhdGFiYXNlAGZUcmln
Z2VyRXhpc3RlZEluRGF0YWJhc2UAZkNyZWF0ZVRhYmxlSW5EYXRhYmFzZQBmRGVsZXRlVGFibGVJ
bkRhdGFiYXNlAGZDcmVhdGVUcmlnZ2VySW5EYXRhYmFzZQBmRGVsZXRlVHJpZ2dlckluRGF0YWJh
c2UAT3BlbkFuZENsb3NlAERpc3Bvc2UAVHJ1bmNhdGUAZ2V0X1N0YXRlAEVkaXRvckJyb3dzYWJs
ZVN0YXRlAENvbm5lY3Rpb25TdGF0ZQBEZWxldGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUA
RGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJy
b3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJr
QXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25B
dHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRp
b25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0
dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55
QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAERlcXVldWUARW5xdWV1ZQBB
ZGRXaXRoVmFsdWUAZ2V0X0hhc1ZhbHVlAHZhbHVlAERvTm90aGluZwBTeXN0ZW0uUnVudGltZS5W
ZXJzaW9uaW5nAFRvU3RyaW5nAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3Rl
bS5Db21wb25lbnRNb2RlbABTVF8zYzUxYTJmODQxMTM0YWI2OWNjMTE0ZDg0N2JkNmIwMy5kbGwA
U3lzdGVtLlhtbABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBPcGVuAFNjcmlwdE1h
aW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxl
Y3Rpb24AU3FsUGFyYW1ldGVyQ29sbGVjdGlvbgBEYkNvbm5lY3Rpb24ASGFuZGxlU3FsQ29ubmVj
dGlvbgBjb25uZWN0aW9uAFVuaXR5RnVuY3Rpb24ASGFuZGxlU3FsQ29ubmVuY3Rpb25PcHRpb24A
QXJndW1lbnRFeGNlcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAEN1bHR1cmVJbmZvAE9wZW5BbmRL
ZWVwAEV4ZWN1dGVTY2FsYXIARGJEYXRhUmVhZGVyAFNxbERhdGFSZWFkZXIARXhlY3V0ZVJlYWRl
cgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGZGb3JtYXRFeGlzdGVkSGFuZGxlcgBTcWxQYXJhbWV0ZXIA
VG9Mb3dlcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlh
Z25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2Vz
AFNUXzNjNTFhMmY4NDExMzRhYjY5Y2MxMTRkODQ3YmQ2YjAzLlByb3BlcnRpZXMuUmVzb3VyY2Vz
LnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTZWxlY3ROb2RlcwBTVF8zYzUxYTJmODQxMTM0YWI2
OWNjMTE0ZDg0N2JkNmIwMy5Qcm9wZXJ0aWVzAFNldHRpbmdzAENvbnRhaW5zAFN5c3RlbS5Db2xs
ZWN0aW9ucwBnZXRfUGFyYW1ldGVycwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBDb25j
YXQAT2JqZWN0AGdldF9EZWZhdWx0AEdldFZhbHVlT3JEZWZhdWx0AEFkcmVhZHlDaGVja0RCSXNF
eGlzdGVkUmVzdWx0AEFkcmVhZHlDaGVja1RhYmxlSXNFeGlzdGVkUmVzdWx0AEFkcmVhZHlDaGVj
a1RyaWdnZXJJc0V4aXN0ZWRSZXN1bHQAc2V0X1Rhc2tSZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xp
ZW50AFhtbERvY3VtZW50AGdldF9DdXJyZW50AGdldF9Db3VudABDb252ZXJ0AFhtbE5vZGVMaXN0
AE1vdmVOZXh0AGdldF9Jbm5lclRleHQAZ2V0X0Fzc2VtYmx5AGNyZWF0ZVRhYmxlUXVlcnkARXhl
Y3V0ZU5vblF1ZXJ5AGNyZWF0ZVRyaWdnZXJRdWVyeQBvcF9FcXVhbGl0eQBvcF9JbmVxdWFsaXR5
AAAAACtEADoAXABCAEkAXABEAEEAVABIAFwAQwBvAG4AZgBpAGcALgB4AG0AbAAAQS8AUgBvAG8A
dAAvAFMAUQBMAFMAZQByAHYAZQByAEMAbwBuAG4AbgBlAGMAdABpAG8AbgBTAHQAcgBpAG4AZwAA
MS8AUgBvAG8AdAAvAEQAYQB0AGEAYgBhAHMAZQBzAC8ARABhAHQAYQBiAGEAcwBlAABFLwBSAG8A
bwB0AC8ASABhAG4AZABsAGUARQB4AGkAcwB0AGUAZABNAGUAdABoAG8AZAAvAEQAYQB0AGEAYgBh
AHMAZQAAPy8AUgBvAG8AdAAvAEgAYQBuAGQAbABlAEUAeABpAHMAdABlAGQATQBlAHQAaABvAGQA
LwBUAGEAYgBsAGUAAEMvAFIAbwBvAHQALwBIAGEAbgBkAGwAZQBFAHgAaQBzAHQAZQBkAE0AZQB0
AGgAbwBkAC8AVAByAGkAZwBnAGUAcgAACU4AYQBtAGUAAB1EAFIATwBQACAARABBAFQAQQBCAEEA
UwBFACAAACFDAFIARQBBAFQARQAgAEQAQQBUAEEAQgBBAFMARQAgAAAhTQBlAHQAYQBUAGEAYgBs
AGUAcwAvAFQAYQBiAGwAZQAAG0MAcgBlAGEAdABpAG8AbgBRAHUAZQByAHkAADNUAHIAaQBnAGcA
ZQByAE8AbgBEAGEAdABhAGIAYQBzAGUALwBUAHIAaQBnAGcAZQByAAAZVABhAGIAbABlAHMALwBU
AGEAYgBsAGUAAHFTAFQAXwAzAGMANQAxAGEAMgBmADgANAAxADEAMwA0AGEAYgA2ADkAYwBjADEA
MQA0AGQAOAA0ADcAYgBkADYAYgAwADMALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1
AHIAYwBlAHMAABNkAG8AbgBvAHQAaABpAG4AZwAAEXQAcgB1AG4AYwBhAHQAZQAADWQAZQBsAGUA
dABlAAApbQBlAHQAaABvAGQAIABkAG8AZQBzAG4AJwB0ACAAZQB4AGkAcwB0AAFjUwBFAEwARQBD
AFQAIABDAE8AVQBOAFQAKAAqACkAIABGAFIATwBNACAAcwB5AHMALgBkAGEAdABhAGIAYQBzAGUA
cwAgAFcASABFAFIARQAgAG4AYQBtAGUAIAA9ACAAJwABAycAARkgAG4AbwB0ACAAZQB4AGkAcwB0
AGUAZAAAK1MARQBMAEUAQwBUACAAQwBPAFUATgBUACgAKgApACAARgBSAE8ATQAgAABfLgBJAE4A
RgBPAFIATQBBAFQASQBPAE4AXwBTAEMASABFAE0AQQAuAFQAQQBCAEwARQBTACAAVwBIAEUAUgBF
ACAAVABBAEIATABFAF8ATgBBAE0ARQAgAD0AIAAnAAEhUwBFAEwARQBDAFQAIABEAEIAXwBOAEEA
TQBFACgAKQAACVUAUwBFACAAAANbAAATXQAuAFsAZABiAG8AXQAuAFsAABtdACAAbgBvAHQAIABl
AHgAaQBzAHQAZQBkAACIWQ0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIABTAEUATABFAEMAVAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIABmAGsALgBuAGEAbQBlACAAQQBTACAARgBvAHIAZQBp
AGcAbgBLAGUAeQBOAGEAbQBlACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAdABwAC4AbgBhAG0AZQAgAEEAUwAgAFQAYQBiAGwAZQBO
AGEAbQBlACwADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAYwBwAC4AbgBhAG0AZQAgAEEAUwAgAEMAbwBsAHUAbQBuAE4AYQBtAGUADQAK
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEYAUgBPAE0A
DQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAcwB5AHMALgBmAG8AcgBlAGkAZwBuAF8AawBlAHkAcwAgAEEAUwAgAGYAawANAAoAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAASQBOAE4ARQBSACAASgBP
AEkATgANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIABzAHkAcwAuAHQAYQBiAGwAZQBzACAAQQBTACAAdABwACAATwBOACAAZgBrAC4AcABh
AHIAZQBuAHQAXwBvAGIAagBlAGMAdABfAGkAZAAgAD0AIAB0AHAALgBvAGIAagBlAGMAdABfAGkA
ZAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAASQBO
AE4ARQBSACAASgBPAEkATgANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIABzAHkAcwAuAHQAYQBiAGwAZQBzACAAQQBTACAAdAByACAATwBO
ACAAZgBrAC4AcgBlAGYAZQByAGUAbgBjAGUAZABfAG8AYgBqAGUAYwB0AF8AaQBkACAAPQAgAHQA
cgAuAG8AYgBqAGUAYwB0AF8AaQBkAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIABJAE4ATgBFAFIAIABKAE8ASQBOAA0ACgAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAHMAeQBzAC4AZgBvAHIAZQBp
AGcAbgBfAGsAZQB5AF8AYwBvAGwAdQBtAG4AcwAgAEEAUwAgAGYAawBjACAATwBOACAAZgBrAC4A
bwBiAGoAZQBjAHQAXwBpAGQAIAA9ACAAZgBrAGMALgBjAG8AbgBzAHQAcgBhAGkAbgB0AF8AbwBi
AGoAZQBjAHQAXwBpAGQADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgAEkATgBOAEUAUgAgAEoATwBJAE4ADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAcwB5AHMALgBjAG8AbAB1AG0AbgBzACAA
QQBTACAAYwBwACAATwBOACAAZgBrAGMALgBwAGEAcgBlAG4AdABfAGMAbwBsAHUAbQBuAF8AaQBk
ACAAPQAgAGMAcAAuAGMAbwBsAHUAbQBuAF8AaQBkACAAQQBOAEQAIABmAGsAYwAuAHAAYQByAGUA
bgB0AF8AbwBiAGoAZQBjAHQAXwBpAGQAIAA9ACAAYwBwAC4AbwBiAGoAZQBjAHQAXwBpAGQADQAK
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEkATgBOAEUA
UgAgAEoATwBJAE4ADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAcwB5AHMALgBjAG8AbAB1AG0AbgBzACAAQQBTACAAYwByACAATwBOACAA
ZgBrAGMALgByAGUAZgBlAHIAZQBuAGMAZQBkAF8AYwBvAGwAdQBtAG4AXwBpAGQAIAA9ACAAYwBy
AC4AYwBvAGwAdQBtAG4AXwBpAGQAIABBAE4ARAAgAGYAawBjAC4AcgBlAGYAZQByAGUAbgBjAGUA
ZABfAG8AYgBqAGUAYwB0AF8AaQBkACAAPQAgAGMAcgAuAG8AYgBqAGUAYwB0AF8AaQBkAA0ACgAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABXAEgARQBSAEUA
DQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAdAByAC4AbgBhAG0AZQAgAD0AIABAAFQAYQBiAGwAZQBOAGEAbQBlAAAVQABUAGEAYgBsAGUA
TgBhAG0AZQAAE1QAYQBiAGwAZQBOAGEAbQBlAAAZRABFAEwARQBUAEUAIABGAFIATwBNACAAAB9U
AFIAVQBOAEMAQQBUAEUAIABUAEEAQgBMAEUAIAAAAQAHXQAuAFsAAICfXQAgAGUAeABpAHMAdABl
AGQAIABhAG4AZAAgAGgAbwB3ACAAdABvACAAaABhAG4AZABsAGUAIABlAHgAaQBzAHQAZQBkACAA
aQBzACAARABvAE4AbwB0AGgAaQBuAGcAIABzAG8AIAB0AGgAZQByAGUAIABhAHIAZQBuACcAdAAg
AGEAYwB0AGkAbwBuACAAdABvACAAdABhAGsAZQABKV0AIABoAGEAcwAgAGIAZQBlAG4AIAB0AHIA
dQBuAGMAYQB0AGUAZAAAOS4AcwB5AHMALgB0AHIAaQBnAGcAZQByAHMAIABXAEgARQBSAEUAIABu
AGEAbQBlACAAPQAgACcAARtEAFIATwBQACAAVABSAEkARwBHAEUAUgAgAAAxQwBhAG4AIABuAG8A
dAAgAHQAcgB1AG4AYwBhAHQAZQAgAHQAcgBpAGcAZwBlAHIAAADU0I7DK9vDRZD6ns75Eu0FAAQg
AQEIAyAAAQUgAQEREQQgAQEOBiABARGAgS4HGQ4OEj0RGBEYERgSQRJFEkkOAhI9Ej0SPRURTQER
FBJRElESRQ4OElUODg4OBSABEkkOAyAADgUgARI9DgQgABJFAyAAHAQgABFlBhURTQERFAUAAg4O
DgYgAgEOEkEFFRFNAQIFIAEBEwADIAACBSAAEoChCAABEoClEYCpBSAAEoCtByACAQ4SgK0FAAIC
Dg4PBwURZQgSURURTQERFBEUBgADDg4ODgQgABMAFAcGEWUIFRFNAQIVEU0BERQSUREUBQABDh0O
BAABCBwuBxMRZQIODhUSaQEOFRJtAQ4OFRFNAQISURJRDhJREnEOCBJRElEVEU0BERQRFAMgAAgE
AAEBDgUVEmkBDgUVEm0BDgUgABKAwQcgAhKAxQ4cBCAAEnEEIAEcDgUgAQITAAUgARMACBwHCxFl
Ag4OFRFNAQISURJRElESURURTQERFBEUHgcMEWUCDg4VEU0BAhJRElESURJRElEVEU0BERQRFAi3
elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAAEAgAAAAEAAwYSeQMGEn0DBhIQAgYIAwYRFAMGERgD
BhEcAwYRJAQAABJ5BAAAEn0FAAEBEn0EAAASEAMAAAEFAAERGA4NAAMCEBJBDhURTQERFBMABQIQ
EkEODhURTQECFRFNAREUGwAIARASQQ4OERwVEU0BAhURTQECAhURTQERFBwACQEQEkEODg4RGBUR
TQECFRFNAQICFRFNAREUGQAHARASQQ4OFRFNAQIVEU0BAgIVEU0BERQECAASeQQIABJ9BAgAEhAI
AQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzNj
NTFhMmY4NDExMzRhYjY5Y2MxMTRkODQ3YmQ2YjAzAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIw
MjMAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlzcGxheU5h
bWUSLk5FVCBGcmFtZXdvcmsgNC43AAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMu
UmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJh
bCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRp
bWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAoFQAAAAAAAAAAAAAulQAAAAgAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAKxUAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwA
AAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAAAAAA
AAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAGgQAAAAAAAAA
AAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAABADJp
KCIAAAEAMmkoIj8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABl
AEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBHoDAAABAFMA
dAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIAMAAAABoAAQAB
AEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAAAA
AABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMwBjADUAMQBh
ADIAZgA4ADQAMQAxADMANABhAGIANgA5AGMAYwAxADEANABkADgANAA3AGIAZAA2AGIAMAAzAAAA
PgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADgANwA0ADQALgAyADYAOQAz
ADAAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AMwBjADUAMQBhADIA
ZgA4ADQAMQAxADMANABhAGIANgA5AGMAYwAxADEANABkADgANAA3AGIAZAA2AGIAMAAzAC4AZABs
AGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgA
dAAgAEAAIAAgADIAMAAyADMAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAA
AAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwAzAGMA
NQAxAGEAMgBmADgANAAxADEAMwA0AGEAYgA2ADkAYwBjADEAMQA0AGQAOAA0ADcAYgBkADYAYgAw
ADMALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMwBjADUA
MQBhADIAZgA4ADQAMQAxADMANABhAGIANgA5AGMAYwAxADEANABkADgANAA3AGIAZAA2AGIAMAAz
AAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA4ADcANAA0AC4A
MgA2ADkAMwAwAAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAu
ADAALgA4ADcANAA0AC4AMgA2ADkAMwAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAADAAAAMw0AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="484"
            Column="17" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="230,42"
          Id="Package\Re-SetUp Databases and Tables"
          TopLeft="483,110" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>