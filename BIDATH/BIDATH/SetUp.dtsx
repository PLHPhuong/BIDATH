<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="12/4/2023 8:38:19 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="LAPTOP-I0N0R4UT"
  DTS:CreatorName="LAPTOP-I0N0R4UT\Lenovo"
  DTS:DTSID="{6A048A62-1690-4928-BAE7-EB49A5986300}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5270.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package1"
  DTS:PackageType="5"
  DTS:VersionBuild="77"
  DTS:VersionGUID="{6F1C4CF3-97FD-4C6A-9662-2C6562D2AAB9}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[(local).master]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{879D59A5-9918-4EF8-B228-7E658F788200}"
      DTS:ObjectName="(local).master">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=(local);Initial Catalog=master;Provider=SQLNCLI11.1;Integrated Security=SSPI;Application Name=SSIS-Package1-{879D59A5-9918-4EF8-B228-7E658F788200}(local).master;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0232933A-7AC6-46B3-AFBE-A2D6B6BEF2F5}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConfigFilePath">
      <DTS:VariableValue
        DTS:DataType="8">D:\BI\DATH\BIDATH\Config.xml</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Re-SetUp Databases and Tables"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{2DDB611D-3289-4E2A-8019-0DB900638D28}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Re-SetUp Databases and Tables"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_3c51a2f841134ab69cc114d847bd6b03"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadWriteVariables="User::ConfigFilePath">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_3c51a2f841134ab69cc114d847bd6b03.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{7DED22C1-1F83-4B02-894B-C2E57D111CAD}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_3c51a2f841134ab69cc114d847bd6b03</RootNamespace>
    <AssemblyName>ST_3c51a2f841134ab69cc114d847bd6b03</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Xml;
using System.Collections.Generic;
using System.Data.SqlClient;
#endregion

namespace ST_3c51a2f841134ab69cc114d847bd6b03
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 

        public enum HandleSqlConnection
        {
            OpenAndClose,
            OpenAndKeep
        }
        public enum HandleExistence
        {
            DoNothing,
            Truncate,
            Delete
        }
        public enum DeleteMethod
        {
            Truncate,
            Delete
        }

        class UnityFunction
        {
            public static HandleExistence fFormatExistedHandler(string method)
            {
                try
                {
                    method = method.ToLower();
                    switch (method)
                    {
                        case "donothing":
                            return HandleExistence.DoNothing;
                        case "truncate":
                            return HandleExistence.Truncate;
                        case "delete":
                            return HandleExistence.Delete;
                        default:
                            throw new ArgumentException("method doesn't exist");
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at HandleExistence\nErrorType:{ex.GetType().Name}\nError:{ex.Message}");
                }

            }
            public static bool fDatabaseExisted(ref SqlConnection connection, string databaseName, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                try
                {
                    // Check the connection state and open it if closed.
                    var currentConnectionState = connection.State;
                    if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                    // Check db existence
                    string queryCheckDBExistence = $"SELECT COUNT(*) FROM sys.databases WHERE name = '{databaseName}'";
                    int databaseCount = 0;
                    using (SqlCommand command = new SqlCommand(queryCheckDBExistence, connection)) { databaseCount = (int)command.ExecuteScalar(); }

                    // change back to current connection state or new connect state based on ConnectionOption
                    if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }
                    return databaseCount > 0;
                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at fDatabaseExisted\nErrorType:{ex.GetType().Name}\nError:{ex.Message}");
                }

            }

            public static bool fTableExistedInDatabase(ref SqlConnection connection, string databaseName, string tableName, bool? AdreadyCheckDBIsExistedResult = null, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                try
                {
                    // Check the connection state and open it if closed.
                    var currentConnectionState = connection.State;
                    if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                    // Check db existence
                    bool dbIsExited = AdreadyCheckDBIsExistedResult ?? fDatabaseExisted(ref connection, databaseName);
                    if (!dbIsExited) { throw new ArgumentException($"{databaseName} not existed"); }

                    // Check table existed
                    string checkTableIsExistedQuery = $"SELECT COUNT(*) FROM {databaseName}.INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '{tableName}'";
                    int tableIsExistedQuery = 0;
                    using (SqlCommand command = new SqlCommand(checkTableIsExistedQuery, connection)) { tableIsExistedQuery = Convert.ToInt32(command.ExecuteScalar()); }

                    // Change back to current connection state or new connect state based on ConnectionOption
                    if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }

                    return tableIsExistedQuery > 0;
                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at fTableExistedInDatabase\nErrorType:{ex.GetType().Name}\nError:{ex.Message}");
                }

            }

            public static void fDeleteTableInDatabase(ref SqlConnection connection, string databaseName, string tableName, DeleteMethod method = DeleteMethod.Truncate, bool? AdreadyCheckDBIsExistedResult = null, bool? AdreadyCheckTableIsExistedResult = null, bool ChangeDatabaseCurrentlyUse = false, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                try
                {
                    // Check the connection state and open it if closed.
                    var currentConnectionState = connection.State;
                    if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                    // Check db existence and table existed (will be checked in fTableExistedInDatabase)
                    bool tableIsExisted = AdreadyCheckTableIsExistedResult ?? fTableExistedInDatabase(ref connection, databaseName, tableName, AdreadyCheckDBIsExistedResult, HandleSqlConnection.OpenAndKeep);

                    // Change db context:
                    string DBCurrentlyUsing;
                    string queryGetDBCurrentlyUsing = $"SELECT DB_NAME()";
                    using (SqlCommand command = new SqlCommand(queryGetDBCurrentlyUsing, connection)) { DBCurrentlyUsing = command.ExecuteScalar().ToString(); }
                    if (queryGetDBCurrentlyUsing != databaseName)
                    {
                        string queryChangeDatabaseConnection = $"USE {databaseName}";
                        using (SqlCommand command = new SqlCommand(queryChangeDatabaseConnection, connection)) { command.ExecuteNonQuery(); }
                    }

                    // return if table not existed
                    if (tableIsExisted) { Console.WriteLine($"[{databaseName}].[dbo].[{tableName}] not existed"); return; }

                    // Find table and ref table
                    List<string> EffectedTable = new List<string>();

                    Queue<string> tbNames = new Queue<string>();
                    tbNames.Enqueue(tableName);
                    while (tbNames.Count > 0)
                    {
                        string currentTableName = tbNames.Dequeue();
                        EffectedTable.Add(currentTableName);
                        string query = @"
                            SELECT
                                fk.name AS ForeignKeyName,
                                tp.name AS TableName,
                                cp.name AS ColumnName
                            FROM
                                sys.foreign_keys AS fk
                            INNER JOIN
                                sys.tables AS tp ON fk.parent_object_id = tp.object_id
                            INNER JOIN
                                sys.tables AS tr ON fk.referenced_object_id = tr.object_id
                            INNER JOIN
                                sys.foreign_key_columns AS fkc ON fk.object_id = fkc.constraint_object_id
                            INNER JOIN
                                sys.columns AS cp ON fkc.parent_column_id = cp.column_id AND fkc.parent_object_id = cp.object_id
                            INNER JOIN
                                sys.columns AS cr ON fkc.referenced_column_id = cr.column_id AND fkc.referenced_object_id = cr.object_id
                            WHERE
                                tr.name = @TableName";
                        using (SqlCommand command = new SqlCommand(query, connection))
                        {
                            command.Parameters.AddWithValue("@TableName", tableName);
                            using (SqlDataReader reader = command.ExecuteReader())
                            {
                                while (reader.Read())
                                {
                                    string referencingTableName = reader["TableName"].ToString();
                                    if (!EffectedTable.Contains(referencingTableName) && !tbNames.Contains(referencingTableName))
                                    {
                                        tbNames.Enqueue(referencingTableName);
                                    }
                                }
                            }
                        }
                    }

                    //Console.WriteLine(string.Join(", ", EffectedTable));

                    // Delete or truncate tables
                    string queryDeleteOrTruncate = $"{(method == DeleteMethod.Truncate ? "TRUNCATE TABLE " : "DELETE FROM ")}";
                    for (int iterater = EffectedTable.Count - 1; iterater >= 0; iterater--)
                    {
                        string query = queryDeleteOrTruncate + EffectedTable[iterater];
                        using (SqlCommand command = new SqlCommand(query, connection)) { command.ExecuteScalar(); }
                    }

                    // Change back to original db
                    if (!ChangeDatabaseCurrentlyUse) { using (SqlCommand command = new SqlCommand($"USE {DBCurrentlyUsing}", connection)) { command.ExecuteNonQuery(); } }

                    // change back to current connection state or new connect state based on ConnectionOption
                    if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }
                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at fDeleteTableInDatabase\nErrorType:{ex.GetType().Name}\nError:{ex.Message}");
                }
            }

            public static void fCreateTableInDatabase(ref SqlConnection connection, string databaseName, string tableName, string createTableQuery, HandleExistence method = HandleExistence.Truncate, bool? AdreadyCheckDBIsExistedResult = null, bool? AdreadyCheckTableIsExistedResult = null, bool ChangeDatabaseCurrentlyUse = false, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                try
                {
                    // Check the connection state and open it if closed.
                    var currentConnectionState = connection.State;
                    if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                    // Check db existence and table existed (will be checked in fTableExistedInDatabase)
                    bool tableIsExisted = AdreadyCheckTableIsExistedResult ?? fTableExistedInDatabase(ref connection, databaseName, tableName, AdreadyCheckDBIsExistedResult, HandleSqlConnection.OpenAndKeep);

                    // Change db context:
                    string DBCurrentlyUsing;
                    string queryGetDBCurrentlyUsing = $"SELECT DB_NAME()";
                    using (SqlCommand command = new SqlCommand(queryGetDBCurrentlyUsing, connection)) { DBCurrentlyUsing = command.ExecuteScalar().ToString(); }
                    if (queryGetDBCurrentlyUsing != databaseName)
                    {
                        string queryChangeDatabaseConnection = $"USE {databaseName}";
                        using (SqlCommand command = new SqlCommand(queryChangeDatabaseConnection, connection)) { command.ExecuteNonQuery(); }
                    }

                    // Delete or Trucate existed table
                    if (tableIsExisted)
                    {
                        switch (method)
                        {
                            case HandleExistence.DoNothing:
                                Console.WriteLine($"[{databaseName}].[{tableName}] existed and how to handle existed is DoNothing so there aren't action to take");
                                return;
                            case HandleExistence.Truncate:
                                fDeleteTableInDatabase(ref connection, databaseName, tableName, DeleteMethod.Truncate, AdreadyCheckDBIsExistedResult, tableIsExisted, false, HandleSqlConnection.OpenAndKeep);
                                Console.WriteLine($"[{databaseName}].[{tableName}] has been truncated");
                                return;
                            case HandleExistence.Delete:
                                fDeleteTableInDatabase(ref connection, databaseName, tableName, DeleteMethod.Delete, AdreadyCheckDBIsExistedResult, tableIsExisted, false, HandleSqlConnection.OpenAndKeep);
                                break;
                        }
                    }
                    // Create table
                    using (SqlCommand command = new SqlCommand(createTableQuery, connection)) { command.ExecuteScalar(); }

                    // Change back to original db
                    if (!ChangeDatabaseCurrentlyUse) { using (SqlCommand command = new SqlCommand($"USE {DBCurrentlyUsing}", connection)) { command.ExecuteNonQuery(); } }

                    // change back to current connection state or new connect state based on ConnectionOption
                    if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }
                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at fCreateTableInDatabase\nErrorType:{ex.GetType().Name}\nError:{ex.Message}");
                }

            }
            
            public static bool fTriggerExistedInDatabase(ref SqlConnection connection, string databaseName, string triggerName, bool? AdreadyCheckDBIsExistedResult = null, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                try
                {
                    // Check the connection state and open it if closed.
                    var currentConnectionState = connection.State;
                    if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                    // Check db existence
                    bool dbIsExited = AdreadyCheckDBIsExistedResult ?? fDatabaseExisted(ref connection, databaseName);
                    if (!dbIsExited) { throw new ArgumentException($"{databaseName} not existed"); }

                    // Check table existed
                    string checkTriggerQuery = $"SELECT COUNT(*) FROM {databaseName}.sys.triggers WHERE name = '{triggerName}'";
                    int triggerIsExisted = 0;
                    using (SqlCommand command = new SqlCommand(checkTriggerQuery, connection)) { triggerIsExisted = Convert.ToInt32(command.ExecuteScalar()); }

                    // Change back to current connection state or new connect state based on ConnectionOption
                    if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }

                    return triggerIsExisted > 0;

                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at fTriggerExistedInDatabase\nErrorType:{ex.GetType().Name}\nError:{ex.Message}");
                }
            }

            public static void fDeleteTriggerInDatabase(ref SqlConnection connection, string databaseName, string triggerName, bool? AdreadyCheckDBIsExistedResult = null, bool? AdreadyCheckTriggerIsExistedResult = null, bool ChangeDatabaseCurrentlyUse = false, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                try
                {
                    // Check the connection state and open it if closed.
                    var currentConnectionState = connection.State;
                    if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                    // Check db existence and trigger existed (will be checked in fTriggerExistedInDatabase)
                    bool triggerIsExisted = AdreadyCheckTriggerIsExistedResult ?? fTriggerExistedInDatabase(ref connection, databaseName, triggerName, AdreadyCheckDBIsExistedResult, HandleSqlConnection.OpenAndKeep);

                    // Change db context:
                    string DBCurrentlyUsing;
                    string queryGetDBCurrentlyUsing = $"SELECT DB_NAME()";
                    using (SqlCommand command = new SqlCommand(queryGetDBCurrentlyUsing, connection)) { DBCurrentlyUsing = command.ExecuteScalar().ToString(); }
                    if (queryGetDBCurrentlyUsing != databaseName)
                    {
                        string queryChangeDatabaseConnection = $"USE {databaseName}";
                        using (SqlCommand command = new SqlCommand(queryChangeDatabaseConnection, connection)) { command.ExecuteNonQuery(); }
                    }

                    // return if table not existed
                    if (triggerIsExisted) { Console.WriteLine($"[{databaseName}].[dbo].[{triggerName}] not existed"); return; }

                    // Delete trigger
                    string deleteTriggerQuery = $"DROP TRIGGER {triggerName}"; ;
                    using (SqlCommand command = new SqlCommand(deleteTriggerQuery, connection)) { command.ExecuteScalar(); }

                    // Change back to original db
                    if (!ChangeDatabaseCurrentlyUse) { using (SqlCommand command = new SqlCommand($"USE {DBCurrentlyUsing}", connection)) { command.ExecuteNonQuery(); } }

                    // change back to current connection state or new connect state based on ConnectionOption
                    if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }

                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at fDeleteTriggerInDatabase\nErrorType:{ex.GetType().Name}\nError:{ex.Message}");
                }
            }

            public static void fCreateTriggerInDatabase(ref SqlConnection connection, string databaseName, string triggerName, string createTriggerQuery, HandleExistence method = HandleExistence.Delete, bool? AdreadyCheckDBIsExistedResult = null, bool? AdreadyCheckTriggerIsExistedResult = null, bool ChangeDatabaseCurrentlyUse = false, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                try
                {
                    // Check the connection state and open it if closed.
                    var currentConnectionState = connection.State;
                    if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                    // Check db existence and trigger existed (will be checked in fTriggerExistedInDatabase)
                    bool triggerIsExisted = AdreadyCheckTriggerIsExistedResult ?? fTriggerExistedInDatabase(ref connection, databaseName, triggerName, AdreadyCheckDBIsExistedResult, HandleSqlConnection.OpenAndKeep);

                    // Change db context:
                    string DBCurrentlyUsing;
                    string queryGetDBCurrentlyUsing = $"SELECT DB_NAME()";
                    using (SqlCommand command = new SqlCommand(queryGetDBCurrentlyUsing, connection)) { DBCurrentlyUsing = command.ExecuteScalar().ToString(); }
                    if (queryGetDBCurrentlyUsing != databaseName)
                    {
                        string queryChangeDatabaseConnection = $"USE {databaseName}";
                        using (SqlCommand command = new SqlCommand(queryChangeDatabaseConnection, connection)) { command.ExecuteNonQuery(); }
                    }

                    // Delete or Trucate existed table
                    if (triggerIsExisted)
                    {
                        switch (method)
                        {
                            case HandleExistence.DoNothing:
                                Console.WriteLine($"[{databaseName}].[{triggerName}] existed and how to handle existed is DoNothing so there aren't action to take");
                                return;
                            case HandleExistence.Truncate:
                                throw new ArgumentException("Can not truncate trigger");
                            case HandleExistence.Delete:
                                string deleteTriggerQuery = $"DROP TRIGGER {triggerName}"; ;
                                using (SqlCommand command = new SqlCommand(deleteTriggerQuery, connection)) { command.ExecuteScalar(); }
                                break;
                        }
                    }
                    // Create trigger
                    using (SqlCommand command = new SqlCommand(createTriggerQuery, connection)) { command.ExecuteScalar(); }

                    // Change back to original db
                    if (!ChangeDatabaseCurrentlyUse) { using (SqlCommand command = new SqlCommand($"USE {DBCurrentlyUsing}", connection)) { command.ExecuteNonQuery(); } }

                    // change back to current connection state or new connect state based on ConnectionOption
                    if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }

                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at fCreateTriggerInDatabase\nErrorType:{ex.GetType().Name}\nError:{ex.Message}");
                }
            }
        }
        public void Main()
		{
            try
            {
                // TODO: Add your code here
                // > Specified variables:
                string configFilePath = @"D:\BI\DATH\BIDATH\Config.xml";
                //string configFilePath;
                if (Dts.Variables["User::ConfigFilePath"] != null || Dts.Variables["User::ConfigFilePath"].Value.ToString().Replace(" ", "").Length != 0 );
                {
                    configFilePath = Dts.Variables["User::ConfigFilePath"].Value.ToString();
                }

                // > Script:    

                // >> Load Condfig
                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.Load(configFilePath);
                string connectionString = xmlDoc.SelectSingleNode("/Root/SQLServerConnnectionString").InnerText;
                XmlNodeList databaseNodes = xmlDoc.SelectNodes("/Root/Databases/Database");


                HandleExistence DatabaseExistenceHandleMethod = UnityFunction.fFormatExistedHandler(xmlDoc.SelectSingleNode("/Root/HandleExistedMethod/Database").InnerText);
                HandleExistence DatabaseTableExistenceHandleMethod = UnityFunction.fFormatExistedHandler(xmlDoc.SelectSingleNode("/Root/HandleExistedMethod/Table").InnerText);
                HandleExistence DatabaseTriggerExistenceHandleMethod = UnityFunction.fFormatExistedHandler(xmlDoc.SelectSingleNode("/Root/HandleExistedMethod/Trigger").InnerText);

                // >> Handle:
                SqlConnection connection = new SqlConnection(connectionString);

                //UnityFunction.fDeleteTableFunc(ref connection, "AdventureWorks2012", "product", " ", HandleExistence.Delete);

                foreach (XmlNode databaseNode in databaseNodes)
                {
                    string databaseName = databaseNode.SelectSingleNode("Name").InnerText;

                    if (connection.State != ConnectionState.Open) connection.Open();
                    // ---- CREATE DATABASE ----:
                    // CREATE DATABASE - step 1: check db existence
                    bool databaseExisted = UnityFunction.fDatabaseExisted(ref connection, databaseName);

                    // CREATE DATABASE - step 2: handle existence and create db
                    if (databaseExisted && DatabaseExistenceHandleMethod == HandleExistence.Delete)
                    {
                        // CREATE DATABASE - step 2.1: drop db
                        string queryDBExistenceHandle = $"DROP DATABASE {databaseName}";
                        using (SqlCommand command = new SqlCommand(queryDBExistenceHandle, connection)) { command.ExecuteScalar(); }
                        databaseExisted = false;
                    }
                    // CREATE DATABASE - step 2.2: create db
                    if (!databaseExisted)
                    {
                        string queryDBCreation = $"CREATE DATABASE {databaseName}";
                        using (SqlCommand command = new SqlCommand(queryDBCreation, connection)) { command.ExecuteScalar(); }
                        databaseExisted = true;
                    }

                    // ---- CREATE METATABLE FOR DB ----:
                    XmlNodeList MetaTables = databaseNode.SelectNodes("MetaTables/Table");
                    if (MetaTables != null)
                    {
                        foreach (XmlNode table in MetaTables)
                        {
                            string tableName = table.SelectSingleNode("Name").InnerText;
                            string createTableQuery = table.SelectSingleNode("CreationQuery").InnerText;
                            UnityFunction.fCreateTableInDatabase(ref connection, databaseName, tableName, createTableQuery, DatabaseTableExistenceHandleMethod, true, false, true, HandleSqlConnection.OpenAndKeep);
                        }
                    }
                    // ---- CREATE TRIGGER FOR DB ----:
                    XmlNodeList Triggers = databaseNode.SelectNodes("TriggerOnDatabase/Trigger");
                    if (Triggers != null)
                    {
                        foreach (XmlNode trigger in Triggers)
                        {
                            string triggerName = trigger.SelectSingleNode("Name").InnerText;
                            string createTriggerQuery = trigger.SelectSingleNode("CreationQuery").InnerText;
                            UnityFunction.fCreateTriggerInDatabase(ref connection, databaseName, triggerName, createTriggerQuery, DatabaseTriggerExistenceHandleMethod, true, false, true, HandleSqlConnection.OpenAndKeep);
                        }
                    }
                    // ---- CREATE TABLE FOR DB ----:
                    XmlNodeList Tables = databaseNode.SelectNodes("Tables/Table");
                    if (Tables != null)
                    {
                        foreach (XmlNode table in Tables)
                        {
                            string tableName = table.SelectSingleNode("Name").InnerText;
                            string createTableQuery = table.SelectSingleNode("CreationQuery").InnerText;
                            UnityFunction.fCreateTableInDatabase(ref connection, databaseName, tableName, createTableQuery, DatabaseTableExistenceHandleMethod, true, false, true, HandleSqlConnection.OpenAndKeep);
                        }
                    }
                }
                //Dts.Variables["User::ConfigInfo"].Value = databaseStructure;
                if (connection.State == ConnectionState.Open) { connection.Close(); }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Exception");
                throw new Exception(ex.Message);

           }
            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_3c51a2f841134ab69cc114d847bd6b03</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_3c51a2f841134ab69cc114d847bd6b03</msb:DisplayName>
    <msb:ProjectId>{E259E6BD-D06B-4DC7-B005-C4FADF0026AF}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_3c51a2f841134ab69cc114d847bd6b03.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Settings.get_Default():ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Sett" +
    "ings")]

namespace ST_3c51a2f841134ab69cc114d847bd6b03.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_3c51a2f841134ab69cc114d847bd6b03")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_3c51a2f841134ab69cc114d847bd6b03")]
[assembly: AssemblyCopyright("Copyright @  2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_3c51a2f841134ab69cc114d847bd6b03.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_3c51a2f841134ab69cc114d847bd6b03.dll">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
BgAxAAAAAQANBQAAAQDoAAAAAQCTBgAAAgCQARAQAwCsBgAAAQCTBgAAAgCQAQAAAwCGARAQBAAh
CRAQBQCsBgAAAQCTBgAAAgCQAQAAAwCGARAQBADoABAQBQAhCRAQBgA/CRAQBwALAhAQCACsBgAA
AQCTBgAAAgCQAQAAAwCGAQAABAAfChAQBQDoABAQBgAhCRAQBwA/CRAQCAALAhAQCQCsBgAAAQCT
BgAAAgCQAQAAAwCdARAQBAAhCRAQBQCsBgAAAQCTBgAAAgCQAQAAAwCdARAQBAAhCRAQBQBgCRAQ
BgALAhAQBwCsBgAAAQCTBgAAAgCQAQAAAwCdAQAABABAChAQBQDoABAQBgAhCRAQBwBgCRAQCAAL
AhAQCQCsBgkAnwcBABEAnwcGABkAnwcKACkAnwcQADEAnwcQADkAnwcQAEEAnwcQAEkAnwcQAFEA
nwcQAFkAnwcQAGEAnwcQAGkAnwcGAOkAnwcGAAkBnwcVABkBnwcGAHEA3AhLACEBfQhRACkB7gVX
ADkBXwpeADEB6QRoAMEANwVsAEEB7wBwAEEBQAV2AEkBnwcGAEkBrAAQAJEAFwF6AJEA9AlsAJEA
QgiAAIEAnwcQAHkAkQeGAIkAwQloAFEBCgOLAFEBDwYGAEEB8giXAKEAnwedAFkBDwdoAKkA+QIG
ABQAnweqAAwAnweqAIkA6wmwAFEB8wIGALEAMAFsAGEBAgq0ALEAnwcQACEBkAkBAHEAnwcGAMEA
nwcGAHEBYwG8AHEBEgrFAPEAnwfLABEBnwcGAEEBfQdsAEEBUwraAIkBnwcQALEA0wHgAJEBfQFs
AEEB8gjmAEEB8ggBAQwAAAWwAAwADwkIARQAAAWwABQADwkIAUEB8gglAaEBGwArAUEBXwraAFkB
MAp2AKkByQFhARwAnwcGACQAnwcGACQA4QSqACQA2QQIARwAsQCqAKEAxQhyAbEB8wR4AaEAOAeA
AcEB7gWFARwAqQiKASQAqQiKAcEBpwCwACQAzQl2ABwAzQl2ABwA7gWQAQgAFADoARIAFQDoAQgA
GADtAQgAIADoAQgAJADtARIAJQDoAQgAKADyARIAKQDoAQgAMADoAQgANADtAQgAOQDoAQgAPADo
ARIAPQDoAQgAQADtARIAQQDoAQIARQD3ARIASQDoAQgAXQDtARIAYQDoARIAZQDoAQIAaQD3ARIA
bQDoARIAfQDoARIAgQDoARIAkQDoARIAlQDoAQIAmQD3ARIAnQDoAQgAsQDyARIAtQDoARIAuQDo
AQIAvQD3ARIAwQDoASkAcwDjAi4ACwC7Ai4AEwDEAi4AGwDjAi4AIwDsAi4AKwAVAy4AMwAVAy4A
OwAVAy4AQwDsAi4ASwAbAy4AUwAVAy4AWwAyA0MAYwDtAUkAcwDjAmEAewDtAWMAawDtARwA0wDu
AA0BMAGWAbUBAwABAAQAAwAAAEoHrAIAAAMCsQIAABkJtgICAAQAAwACAAUABQABAAYABQACAAcA
BwCQAKQAZgFsAQSAAAABAAAAKiJwRwAAAAAAACMAAAAEAAAAAAAAAAAAAADWAYMAAAAAABAAAAAA
AAAAAAAAAN8BSwUAAAAABAAAAAAAAAAAAAAA1gHjBQAAAAAEAAAAAAAAAAAAAADWAXcAAAAAAAQA
AAAAAAAAAAAAANYB9wUAAAAAEAAAAAAAAAAAAAAA3wFQAAAAAAAEAAAAAAAAAAAAAADWAZQIAAAA
AAAAAAABAAAA8AcAAAUAAgAGAAIABwACAAgAAgAJAAIAAAAAAABOdWxsYWJsZWAxAFF1ZXVlYDEA
TGlzdGAxAFRvSW50MzIAU1RfM2M1MWEyZjg0MTEzNGFiNjljYzExNGQ4NDdiZDZiMDMAPE1vZHVs
ZT4ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lzdGVtLkRhdGEAbXNj
b3JsaWIAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMAUmVhZABMb2FkAEFkZABmRGF0YWJhc2VF
eGlzdGVkAERiQ29tbWFuZABTcWxDb21tYW5kAERlbGV0ZU1ldGhvZABtZXRob2QAUmVwbGFjZQBk
ZWZhdWx0SW5zdGFuY2UASGFuZGxlRXhpc3RlbmNlAFNlbGVjdFNpbmdsZU5vZGUAWG1sTm9kZQBn
ZXRfTWVzc2FnZQBWYXJpYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBl
RnJvbUhhbmRsZQBDb25zb2xlAGdldF9OYW1lAHRhYmxlTmFtZQBkYXRhYmFzZU5hbWUAdHJpZ2dl
ck5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBXcml0ZUxpbmUAR2V0VHlwZQBG
YWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBDaGFuZ2VEYXRh
YmFzZUN1cnJlbnRseVVzZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25T
ZXR0aW5nc0Jhc2UAZlRhYmxlRXhpc3RlZEluRGF0YWJhc2UAZlRyaWdnZXJFeGlzdGVkSW5EYXRh
YmFzZQBmQ3JlYXRlVGFibGVJbkRhdGFiYXNlAGZEZWxldGVUYWJsZUluRGF0YWJhc2UAZkNyZWF0
ZVRyaWdnZXJJbkRhdGFiYXNlAGZEZWxldGVUcmlnZ2VySW5EYXRhYmFzZQBPcGVuQW5kQ2xvc2UA
RGlzcG9zZQBUcnVuY2F0ZQBnZXRfU3RhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29ubmVjdGlv
blN0YXRlAERlbGV0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJD
b2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRl
AEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0
RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJs
eURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNz
ZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3Jp
cHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGlt
ZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUARGVxdWV1ZQBFbnF1ZXVlAGdldF9WYWx1ZQBBZGRXaXRo
VmFsdWUAZ2V0X0hhc1ZhbHVlAHZhbHVlAERvTm90aGluZwBTeXN0ZW0uUnVudGltZS5WZXJzaW9u
aW5nAFRvU3RyaW5nAGdldF9MZW5ndGgATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwA
U3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzNjNTFhMmY4NDExMzRhYjY5Y2MxMTRkODQ3YmQ2YjAz
LmRsbABTeXN0ZW0uWG1sAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFuAE9wZW4AU2Ny
aXB0TWFpbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0u
UmVmbGVjdGlvbgBTcWxQYXJhbWV0ZXJDb2xsZWN0aW9uAERiQ29ubmVjdGlvbgBIYW5kbGVTcWxD
b25uZWN0aW9uAGNvbm5lY3Rpb24AVW5pdHlGdW5jdGlvbgBIYW5kbGVTcWxDb25uZW5jdGlvbk9w
dGlvbgBBcmd1bWVudEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUluZm8ATWVt
YmVySW5mbwBPcGVuQW5kS2VlcABFeGVjdXRlU2NhbGFyAERiRGF0YVJlYWRlcgBTcWxEYXRhUmVh
ZGVyAEV4ZWN1dGVSZWFkZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBmRm9ybWF0RXhpc3RlZEhhbmRs
ZXIAU3FsUGFyYW1ldGVyAFRvTG93ZXIASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAuY3RvcgAu
Y2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMA
U3lzdGVtLlJlc291cmNlcwBTVF8zYzUxYTJmODQxMTM0YWI2OWNjMTE0ZDg0N2JkNmIwMy5Qcm9w
ZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU2VsZWN0Tm9kZXMAU1Rf
M2M1MWEyZjg0MTEzNGFiNjljYzExNGQ4NDdiZDZiMDMuUHJvcGVydGllcwBnZXRfVmFyaWFibGVz
AFNldHRpbmdzAFN5c3RlbS5XaW5kb3dzLkZvcm1zAENvbnRhaW5zAFN5c3RlbS5Db2xsZWN0aW9u
cwBnZXRfUGFyYW1ldGVycwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBDb25jYXQARHRz
T2JqZWN0AGdldF9EZWZhdWx0AEdldFZhbHVlT3JEZWZhdWx0AEFkcmVhZHlDaGVja0RCSXNFeGlz
dGVkUmVzdWx0AEFkcmVhZHlDaGVja1RhYmxlSXNFeGlzdGVkUmVzdWx0AEFkcmVhZHlDaGVja1Ry
aWdnZXJJc0V4aXN0ZWRSZXN1bHQARGlhbG9nUmVzdWx0AHNldF9UYXNrUmVzdWx0AFN5c3RlbS5E
YXRhLlNxbENsaWVudABYbWxEb2N1bWVudABnZXRfQ3VycmVudABnZXRfQ291bnQAQ29udmVydABY
bWxOb2RlTGlzdABNb3ZlTmV4dABnZXRfSW5uZXJUZXh0AFNob3cATWVzc2FnZUJveABnZXRfQXNz
ZW1ibHkAY3JlYXRlVGFibGVRdWVyeQBFeGVjdXRlTm9uUXVlcnkAY3JlYXRlVHJpZ2dlclF1ZXJ5
AG9wX0VxdWFsaXR5AG9wX0luZXF1YWxpdHkAAAAAADlEADoAXABCAEkAXABEAEEAVABIAFwAQgBJ
AEQAQQBUAEgAXABDAG8AbgBmAGkAZwAuAHgAbQBsAAApVQBzAGUAcgA6ADoAQwBvAG4AZgBpAGcA
RgBpAGwAZQBQAGEAdABoAAADIAAAAQBBLwBSAG8AbwB0AC8AUwBRAEwAUwBlAHIAdgBlAHIAQwBv
AG4AbgBuAGUAYwB0AGkAbwBuAFMAdAByAGkAbgBnAAAxLwBSAG8AbwB0AC8ARABhAHQAYQBiAGEA
cwBlAHMALwBEAGEAdABhAGIAYQBzAGUAAEUvAFIAbwBvAHQALwBIAGEAbgBkAGwAZQBFAHgAaQBz
AHQAZQBkAE0AZQB0AGgAbwBkAC8ARABhAHQAYQBiAGEAcwBlAAA/LwBSAG8AbwB0AC8ASABhAG4A
ZABsAGUARQB4AGkAcwB0AGUAZABNAGUAdABoAG8AZAAvAFQAYQBiAGwAZQAAQy8AUgBvAG8AdAAv
AEgAYQBuAGQAbABlAEUAeABpAHMAdABlAGQATQBlAHQAaABvAGQALwBUAHIAaQBnAGcAZQByAAAJ
TgBhAG0AZQAAHUQAUgBPAFAAIABEAEEAVABBAEIAQQBTAEUAIAAAIUMAUgBFAEEAVABFACAARABB
AFQAQQBCAEEAUwBFACAAACFNAGUAdABhAFQAYQBiAGwAZQBzAC8AVABhAGIAbABlAAAbQwByAGUA
YQB0AGkAbwBuAFEAdQBlAHIAeQAAM1QAcgBpAGcAZwBlAHIATwBuAEQAYQB0AGEAYgBhAHMAZQAv
AFQAcgBpAGcAZwBlAHIAABlUAGEAYgBsAGUAcwAvAFQAYQBiAGwAZQAAE0UAeABjAGUAcAB0AGkA
bwBuAABxUwBUAF8AMwBjADUAMQBhADIAZgA4ADQAMQAxADMANABhAGIANgA5AGMAYwAxADEANABk
ADgANAA3AGIAZAA2AGIAMAAzAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMA
ZQBzAAATZABvAG4AbwB0AGgAaQBuAGcAABF0AHIAdQBuAGMAYQB0AGUAAA1kAGUAbABlAHQAZQAA
KW0AZQB0AGgAbwBkACAAZABvAGUAcwBuACcAdAAgAGUAeABpAHMAdAABR0UAcgByAG8AcgAgAGEA
dAAgAEgAYQBuAGQAbABlAEUAeABpAHMAdABlAG4AYwBlAAoARQByAHIAbwByAFQAeQBwAGUAOgAA
DwoARQByAHIAbwByADoAAGNTAEUATABFAEMAVAAgAEMATwBVAE4AVAAoACoAKQAgAEYAUgBPAE0A
IABzAHkAcwAuAGQAYQB0AGEAYgBhAHMAZQBzACAAVwBIAEUAUgBFACAAbgBhAG0AZQAgAD0AIAAn
AAEDJwABSUUAcgByAG8AcgAgAGEAdAAgAGYARABhAHQAYQBiAGEAcwBlAEUAeABpAHMAdABlAGQA
CgBFAHIAcgBvAHIAVAB5AHAAZQA6AAAZIABuAG8AdAAgAGUAeABpAHMAdABlAGQAACtTAEUATABF
AEMAVAAgAEMATwBVAE4AVAAoACoAKQAgAEYAUgBPAE0AIAAAXy4ASQBOAEYATwBSAE0AQQBUAEkA
TwBOAF8AUwBDAEgARQBNAEEALgBUAEEAQgBMAEUAUwAgAFcASABFAFIARQAgAFQAQQBCAEwARQBf
AE4AQQBNAEUAIAA9ACAAJwABV0UAcgByAG8AcgAgAGEAdAAgAGYAVABhAGIAbABlAEUAeABpAHMA
dABlAGQASQBuAEQAYQB0AGEAYgBhAHMAZQAKAEUAcgByAG8AcgBUAHkAcABlADoAACFTAEUATABF
AEMAVAAgAEQAQgBfAE4AQQBNAEUAKAApAAAJVQBTAEUAIAAAA1sAABNdAC4AWwBkAGIAbwBdAC4A
WwAAG10AIABuAG8AdAAgAGUAeABpAHMAdABlAGQAAIjpDQAKACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAUwBFAEwARQBDAFQADQAKACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IABmAGsALgBuAGEAbQBlACAAQQBTACAARgBvAHIAZQBpAGcAbgBLAGUAeQBOAGEAbQBlACwADQAK
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAB0AHAALgBuAGEAbQBlACAAQQBTACAAVABhAGIAbABlAE4AYQBtAGUALAANAAoAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgAGMAcAAuAG4AYQBtAGUAIABBAFMAIABDAG8AbAB1AG0AbgBOAGEAbQBlAA0ACgAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEYAUgBPAE0A
DQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIABzAHkAcwAuAGYAbwByAGUAaQBnAG4AXwBrAGUAeQBzACAAQQBTACAAZgBrAA0A
CgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
AEkATgBOAEUAUgAgAEoATwBJAE4ADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABzAHkAcwAuAHQAYQBiAGwAZQBzACAAQQBT
ACAAdABwACAATwBOACAAZgBrAC4AcABhAHIAZQBuAHQAXwBvAGIAagBlAGMAdABfAGkAZAAgAD0A
IAB0AHAALgBvAGIAagBlAGMAdABfAGkAZAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABJAE4ATgBFAFIAIABKAE8ASQBOAA0ACgAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAcwB5AHMALgB0AGEAYgBsAGUAcwAgAEEAUwAgAHQAcgAgAE8ATgAgAGYAawAuAHIAZQBmAGUA
cgBlAG4AYwBlAGQAXwBvAGIAagBlAGMAdABfAGkAZAAgAD0AIAB0AHIALgBvAGIAagBlAGMAdABf
AGkAZAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIABJAE4ATgBFAFIAIABKAE8ASQBOAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAcwB5AHMALgBmAG8AcgBlAGkA
ZwBuAF8AawBlAHkAXwBjAG8AbAB1AG0AbgBzACAAQQBTACAAZgBrAGMAIABPAE4AIABmAGsALgBv
AGIAagBlAGMAdABfAGkAZAAgAD0AIABmAGsAYwAuAGMAbwBuAHMAdAByAGEAaQBuAHQAXwBvAGIA
agBlAGMAdABfAGkAZAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIABJAE4ATgBFAFIAIABKAE8ASQBOAA0ACgAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAcwB5AHMALgBj
AG8AbAB1AG0AbgBzACAAQQBTACAAYwBwACAATwBOACAAZgBrAGMALgBwAGEAcgBlAG4AdABfAGMA
bwBsAHUAbQBuAF8AaQBkACAAPQAgAGMAcAAuAGMAbwBsAHUAbQBuAF8AaQBkACAAQQBOAEQAIABm
AGsAYwAuAHAAYQByAGUAbgB0AF8AbwBiAGoAZQBjAHQAXwBpAGQAIAA9ACAAYwBwAC4AbwBiAGoA
ZQBjAHQAXwBpAGQADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAASQBOAE4ARQBSACAASgBPAEkATgANAAoAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAHMAeQBzAC4AYwBv
AGwAdQBtAG4AcwAgAEEAUwAgAGMAcgAgAE8ATgAgAGYAawBjAC4AcgBlAGYAZQByAGUAbgBjAGUA
ZABfAGMAbwBsAHUAbQBuAF8AaQBkACAAPQAgAGMAcgAuAGMAbwBsAHUAbQBuAF8AaQBkACAAQQBO
AEQAIABmAGsAYwAuAHIAZQBmAGUAcgBlAG4AYwBlAGQAXwBvAGIAagBlAGMAdABfAGkAZAAgAD0A
IABjAHIALgBvAGIAagBlAGMAdABfAGkAZAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABXAEgARQBSAEUADQAKACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAB0AHIALgBu
AGEAbQBlACAAPQAgAEAAVABhAGIAbABlAE4AYQBtAGUAABVAAFQAYQBiAGwAZQBOAGEAbQBlAAAT
VABhAGIAbABlAE4AYQBtAGUAABlEAEUATABFAFQARQAgAEYAUgBPAE0AIAAAH1QAUgBVAE4AQwBB
AFQARQAgAFQAQQBCAEwARQAgAABVRQByAHIAbwByACAAYQB0ACAAZgBEAGUAbABlAHQAZQBUAGEA
YgBsAGUASQBuAEQAYQB0AGEAYgBhAHMAZQAKAEUAcgByAG8AcgBUAHkAcABlADoAAAddAC4AWwAA
gJ9dACAAZQB4AGkAcwB0AGUAZAAgAGEAbgBkACAAaABvAHcAIAB0AG8AIABoAGEAbgBkAGwAZQAg
AGUAeABpAHMAdABlAGQAIABpAHMAIABEAG8ATgBvAHQAaABpAG4AZwAgAHMAbwAgAHQAaABlAHIA
ZQAgAGEAcgBlAG4AJwB0ACAAYQBjAHQAaQBvAG4AIAB0AG8AIAB0AGEAawBlAAEpXQAgAGgAYQBz
ACAAYgBlAGUAbgAgAHQAcgB1AG4AYwBhAHQAZQBkAABVRQByAHIAbwByACAAYQB0ACAAZgBDAHIA
ZQBhAHQAZQBUAGEAYgBsAGUASQBuAEQAYQB0AGEAYgBhAHMAZQAKAEUAcgByAG8AcgBUAHkAcABl
ADoAADkuAHMAeQBzAC4AdAByAGkAZwBnAGUAcgBzACAAVwBIAEUAUgBFACAAbgBhAG0AZQAgAD0A
IAAnAAFbRQByAHIAbwByACAAYQB0ACAAZgBUAHIAaQBnAGcAZQByAEUAeABpAHMAdABlAGQASQBu
AEQAYQB0AGEAYgBhAHMAZQAKAEUAcgByAG8AcgBUAHkAcABlADoAABtEAFIATwBQACAAVABSAEkA
RwBHAEUAUgAgAABZRQByAHIAbwByACAAYQB0ACAAZgBEAGUAbABlAHQAZQBUAHIAaQBnAGcAZQBy
AEkAbgBEAGEAdABhAGIAYQBzAGUACgBFAHIAcgBvAHIAVAB5AHAAZQA6AAAxQwBhAG4AIABuAG8A
dAAgAHQAcgB1AG4AYwBhAHQAZQAgAHQAcgBpAGcAZwBlAHIAAFlFAHIAcgBvAHIAIABhAHQAIABm
AEMAcgBlAGEAdABlAFQAcgBpAGcAZwBlAHIASQBuAEQAYQB0AGEAYgBhAHMAZQAKAEUAcgByAG8A
cgBUAHkAcABlADoAAAAAAHbBu62O4f1IihklGmJMtIkABCABAQgDIAABBSABARERBCABAQ4GIAEB
EYCBLgcZDg4SPREYERgRGBJBEkUSSQ4CEj0SPRI9FRFNAREUElESURJFDg4SVQ4ODg4FIAASgJEF
IAASgJUGIAESgJkcCQACAhKAnRKAnQMgABwDIAAOBSACDg4OAyAACAUgARJJDgUgARI9DgQgABJF
BCAAEWUGFRFNAREUBQACDg4OBiACAQ4SQQUVEU0BAgUgAQETAAMgAAIHAAIRgLUODggAARKAuRGA
vQUgABKAwQcgAgEOEoDBBgcCERgSWQUAAgIODgUgABKAuQcABA4ODg4OEgcHEWUIElEVEU0BERQR
FAISWQYAAw4ODg4EIAATABcHCBFlCBURTQECFRFNAREUElERFAISWQUAAQ4dDgQAAQgcMAcUEWUC
Dg4VEmkBDhUSbQEODhURTQECElESUQ4SURJxDggSURJRFRFNAREUERQSWQQAAQEOBRUSaQEOBRUS
bQEOBSAAEoDZByACEoDdDhwEIAAScQQgARwOBSABAhMABSABEwAIHgcMEWUCDg4VEU0BAhJRElES
URJRFRFNAREUERQSWSAHDRFlAg4OFRFNAQISURJRElESURJRFRFNAREUERQSWQi3elxWGTTgiQiJ
hF3NgIDMkQQAAAAABAEAAAAEAgAAAAEAAwYSeQMGEn0DBhIQAgYIAwYRFAMGERgDBhEcAwYRJAQA
ABJ5BAAAEn0FAAEBEn0EAAASEAMAAAEFAAERGA4NAAMCEBJBDhURTQERFBMABQIQEkEODhURTQEC
FRFNAREUGwAIARASQQ4OERwVEU0BAhURTQECAhURTQERFBwACQEQEkEODg4RGBURTQECFRFNAQIC
FRFNAREUGQAHARASQQ4OFRFNAQIVEU0BAgIVEU0BERQECAASeQQIABJ9BAgAEhAIAQAIAAAAAAAe
AQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzNjNTFhMmY4NDEx
MzRhYjY5Y2MxMTRkODQ3YmQ2YjAzAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjMAAEkBABou
TkVURnJhbWV3b3JrLFZlcnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBG
cmFtZXdvcmsgNC43tAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVh
ZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tl
eVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VT
ZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAERdAAAAAAAAAAAAAF5dAAAAIAAAAAAAAAAAAAAAAAAA
AAAAAAAAAABQXQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAA
AAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAaBAAAAAAAAAAAAAAa
BDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAcEcqIgAA
AQBwRyoiPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBu
AGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMAAAEAUwB0AHIA
aQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBv
AG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAHAA
JAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwAzAGMANQAxAGEAMgBm
ADgANAAxADEAMwA0AGEAYgA2ADkAYwBjADEAMQA0AGQAOAA0ADcAYgBkADYAYgAwADMAAAA+AA8A
AQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AOAA3ADQANgAuADEAOAAyADgAOAAA
AAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAzAGMANQAxAGEAMgBmADgA
NAAxADEAMwA0AGEAYgA2ADkAYwBjADEAMQA0AGQAOAA0ADcAYgBkADYAYgAwADMALgBkAGwAbAAA
AEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAA
QAAgACAAMgAwADIAMwAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAA
AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADMAYwA1ADEA
YQAyAGYAOAA0ADEAMQAzADQAYQBiADYAOQBjAGMAMQAxADQAZAA4ADQANwBiAGQANgBiADAAMwAu
AGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwAzAGMANQAxAGEA
MgBmADgANAAxADEAMwA0AGEAYgA2ADkAYwBjADEAMQA0AGQAOAA0ADcAYgBkADYAYgAwADMAAABC
AA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADgANwA0ADYALgAxADgA
MgA4ADgAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADgANwA0ADYALgAxADgAMgA4ADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAAcD0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="230,42"
          Id="Package\Re-SetUp Databases and Tables"
          TopLeft="483,110" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>