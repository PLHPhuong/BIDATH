<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="12/4/2023 8:38:19 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="LAPTOP-I0N0R4UT"
  DTS:CreatorName="LAPTOP-I0N0R4UT\Lenovo"
  DTS:DTSID="{6A048A62-1690-4928-BAE7-EB49A5986300}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5270.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package1"
  DTS:PackageType="5"
  DTS:VersionBuild="66"
  DTS:VersionGUID="{F14C6579-91AE-4523-83C7-94D3D548A1F6}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[(local).BI_Stage]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{5A23E2C8-F909-4A20-8D8E-3C6AD9E6C926}"
      DTS:ObjectName="(local).BI_Stage">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=(local);Initial Catalog=BI_Stage;Provider=SQLNCLI11.1;Integrated Security=SSPI;Application Name=SSIS-Package1-{5A23E2C8-F909-4A20-8D8E-3C6AD9E6C926}(local).BI_Stage;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[(local).master]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{879D59A5-9918-4EF8-B228-7E658F788200}"
      DTS:ObjectName="(local).master">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=(local);Initial Catalog=master;Provider=SQLNCLI11.1;Integrated Security=SSPI;Application Name=SSIS-Package1-{879D59A5-9918-4EF8-B228-7E658F788200}(local).master;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Excel Connection Manager]"
      DTS:CreationName="EXCEL"
      DTS:DTSID="{B4B08074-76D1-45B1-B77E-CB7E973AC58A}"
      DTS:ObjectName="Excel Connection Manager">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="0"
          DTS:ConnectRetryInterval="0"
          DTS:ConnectionString="Provider=Microsoft.ACE.OLEDB.16.0;Data Source=D:\BI\DATH\supermarket_sales.xls;Extended Properties=&quot;EXCEL 12.0 XML;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Re-SetUp Databases and Tables"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{2DDB611D-3289-4E2A-8019-0DB900638D28}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Re-SetUp Databases and Tables"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_3c51a2f841134ab69cc114d847bd6b03"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_3c51a2f841134ab69cc114d847bd6b03.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{7DED22C1-1F83-4B02-894B-C2E57D111CAD}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_3c51a2f841134ab69cc114d847bd6b03</RootNamespace>
    <AssemblyName>ST_3c51a2f841134ab69cc114d847bd6b03</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Settings.get_Default():ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Sett" +
    "ings")]

namespace ST_3c51a2f841134ab69cc114d847bd6b03.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Xml;
using System.Collections.Generic;
using System.Data.SqlClient;
#endregion

namespace ST_3c51a2f841134ab69cc114d847bd6b03
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 

        public enum HandleSqlConnection
        {
            OpenAndClose,
            OpenAndKeep
        }
        public enum HandleExistence
        {
            DoNothing,
            Truncate,
            Delete
        }
        public enum DeleteMethod
        {
            Truncate,
            Delete
        }

        class UnityFunction
        {
            public static HandleExistence fFormatExistedHandler(string method)
            {
                try
                {
                    method = method.ToLower();
                    switch (method)
                    {
                        case "donothing":
                            return HandleExistence.DoNothing;
                        case "truncate":
                            return HandleExistence.Truncate;
                        case "delete":
                            return HandleExistence.Delete;
                        default:
                            throw new ArgumentException("method doesn't exist");
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at HandleExistence\nErrorType:{ex.Message}\nError:{ex.Message}");
                }

            }
            public static bool fDatabaseExisted(ref SqlConnection connection, string databaseName, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                try
                {
                    // Check the connection state and open it if closed.
                    var currentConnectionState = connection.State;
                    if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                    // Check db existence
                    string queryCheckDBExistence = $"SELECT COUNT(*) FROM sys.databases WHERE name = '{databaseName}'";
                    int databaseCount = 0;
                    using (SqlCommand command = new SqlCommand(queryCheckDBExistence, connection)) { databaseCount = (int)command.ExecuteScalar(); }

                    // change back to current connection state or new connect state based on ConnectionOption
                    if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }
                    return databaseCount > 0;
                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at fDatabaseExisted\nErrorType:{ex.Message}\nError:{ex.Message}");
                }

            }

            public static bool fTableExistedInDatabase(ref SqlConnection connection, string databaseName, string tableName, bool? AdreadyCheckDBIsExistedResult = null, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                try
                {
                    // Check the connection state and open it if closed.
                    var currentConnectionState = connection.State;
                    if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                    // Check db existence
                    bool dbIsExited = AdreadyCheckDBIsExistedResult ?? fDatabaseExisted(ref connection, databaseName);
                    if (!dbIsExited) { throw new ArgumentException($"{databaseName} not existed"); }

                    // Check table existed
                    string checkTableIsExistedQuery = $"SELECT COUNT(*) FROM {databaseName}.INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '{tableName}'";
                    int tableIsExistedQuery = 0;
                    using (SqlCommand command = new SqlCommand(checkTableIsExistedQuery, connection)) { tableIsExistedQuery = Convert.ToInt32(command.ExecuteScalar()); }

                    // Change back to current connection state or new connect state based on ConnectionOption
                    if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }

                    return tableIsExistedQuery > 0;
                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at fTableExistedInDatabase\nErrorType:{ex.Message}\nError:{ex.Message}");
                }

            }

            public static void fDeleteTableInDatabase(ref SqlConnection connection, string databaseName, string tableName, DeleteMethod method = DeleteMethod.Truncate, bool? AdreadyCheckDBIsExistedResult = null, bool? AdreadyCheckTableIsExistedResult = null, bool ChangeDatabaseCurrentlyUse = false, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                try
                {
                    // Check the connection state and open it if closed.
                    var currentConnectionState = connection.State;
                    if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                    // Check db existence and table existed (will be checked in fTableExistedInDatabase)
                    bool tableIsExisted = AdreadyCheckTableIsExistedResult ?? fTableExistedInDatabase(ref connection, databaseName, tableName, AdreadyCheckDBIsExistedResult, HandleSqlConnection.OpenAndKeep);

                    // Change db context:
                    string DBCurrentlyUsing;
                    string queryGetDBCurrentlyUsing = $"SELECT DB_NAME()";
                    using (SqlCommand command = new SqlCommand(queryGetDBCurrentlyUsing, connection)) { DBCurrentlyUsing = command.ExecuteScalar().ToString(); }
                    if (queryGetDBCurrentlyUsing != databaseName)
                    {
                        string queryChangeDatabaseConnection = $"USE {databaseName}";
                        using (SqlCommand command = new SqlCommand(queryChangeDatabaseConnection, connection)) { command.ExecuteNonQuery(); }
                    }

                    // return if table not existed
                    if (tableIsExisted) { Console.WriteLine($"[{databaseName}].[dbo].[{tableName}] not existed"); return; }

                    // Find table and ref table
                    List<string> EffectedTable = new List<string>();

                    Queue<string> tbNames = new Queue<string>();
                    tbNames.Enqueue(tableName);
                    while (tbNames.Count > 0)
                    {
                        string currentTableName = tbNames.Dequeue();
                        EffectedTable.Add(currentTableName);
                        string query = @"
                            SELECT
                                fk.name AS ForeignKeyName,
                                tp.name AS TableName,
                                cp.name AS ColumnName
                            FROM
                                sys.foreign_keys AS fk
                            INNER JOIN
                                sys.tables AS tp ON fk.parent_object_id = tp.object_id
                            INNER JOIN
                                sys.tables AS tr ON fk.referenced_object_id = tr.object_id
                            INNER JOIN
                                sys.foreign_key_columns AS fkc ON fk.object_id = fkc.constraint_object_id
                            INNER JOIN
                                sys.columns AS cp ON fkc.parent_column_id = cp.column_id AND fkc.parent_object_id = cp.object_id
                            INNER JOIN
                                sys.columns AS cr ON fkc.referenced_column_id = cr.column_id AND fkc.referenced_object_id = cr.object_id
                            WHERE
                                tr.name = @TableName";
                        using (SqlCommand command = new SqlCommand(query, connection))
                        {
                            command.Parameters.AddWithValue("@TableName", tableName);
                            using (SqlDataReader reader = command.ExecuteReader())
                            {
                                while (reader.Read())
                                {
                                    string referencingTableName = reader["TableName"].ToString();
                                    if (!EffectedTable.Contains(referencingTableName) && !tbNames.Contains(referencingTableName))
                                    {
                                        tbNames.Enqueue(referencingTableName);
                                    }
                                }
                            }
                        }
                    }

                    //Console.WriteLine(string.Join(", ", EffectedTable));

                    // Delete or truncate tables
                    string queryDeleteOrTruncate = $"{(method == DeleteMethod.Truncate ? "TRUNCATE TABLE " : "DELETE FROM ")}";
                    for (int iterater = EffectedTable.Count - 1; iterater >= 0; iterater--)
                    {
                        string query = queryDeleteOrTruncate + EffectedTable[iterater];
                        using (SqlCommand command = new SqlCommand(query, connection)) { command.ExecuteScalar(); }
                    }

                    // Change back to original db
                    if (!ChangeDatabaseCurrentlyUse) { using (SqlCommand command = new SqlCommand($"USE {DBCurrentlyUsing}", connection)) { command.ExecuteNonQuery(); } }

                    // change back to current connection state or new connect state based on ConnectionOption
                    if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }
                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at fDeleteTableInDatabase\nErrorType:{ex.Message}\nError:{ex.Message}");
                }
            }

            public static void fCreateTableInDatabase(ref SqlConnection connection, string databaseName, string tableName, string createTableQuery, HandleExistence method = HandleExistence.Truncate, bool? AdreadyCheckDBIsExistedResult = null, bool? AdreadyCheckTableIsExistedResult = null, bool ChangeDatabaseCurrentlyUse = false, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                try
                {
                    // Check the connection state and open it if closed.
                    var currentConnectionState = connection.State;
                    if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                    // Check db existence and table existed (will be checked in fTableExistedInDatabase)
                    bool tableIsExisted = AdreadyCheckTableIsExistedResult ?? fTableExistedInDatabase(ref connection, databaseName, tableName, AdreadyCheckDBIsExistedResult, HandleSqlConnection.OpenAndKeep);

                    // Change db context:
                    string DBCurrentlyUsing;
                    string queryGetDBCurrentlyUsing = $"SELECT DB_NAME()";
                    using (SqlCommand command = new SqlCommand(queryGetDBCurrentlyUsing, connection)) { DBCurrentlyUsing = command.ExecuteScalar().ToString(); }
                    if (queryGetDBCurrentlyUsing != databaseName)
                    {
                        string queryChangeDatabaseConnection = $"USE {databaseName}";
                        using (SqlCommand command = new SqlCommand(queryChangeDatabaseConnection, connection)) { command.ExecuteNonQuery(); }
                    }

                    // Delete or Trucate existed table
                    if (tableIsExisted)
                    {
                        switch (method)
                        {
                            case HandleExistence.DoNothing:
                                Console.WriteLine($"[{databaseName}].[{tableName}] existed and how to handle existed is DoNothing so there aren't action to take");
                                return;
                            case HandleExistence.Truncate:
                                fDeleteTableInDatabase(ref connection, databaseName, tableName, DeleteMethod.Truncate, AdreadyCheckDBIsExistedResult, tableIsExisted, false, HandleSqlConnection.OpenAndKeep);
                                Console.WriteLine($"[{databaseName}].[{tableName}] has been truncated");
                                return;
                            case HandleExistence.Delete:
                                fDeleteTableInDatabase(ref connection, databaseName, tableName, DeleteMethod.Delete, AdreadyCheckDBIsExistedResult, tableIsExisted, false, HandleSqlConnection.OpenAndKeep);
                                break;
                        }
                    }
                    // Create table
                    using (SqlCommand command = new SqlCommand(createTableQuery, connection)) { command.ExecuteScalar(); }

                    // Change back to original db
                    if (!ChangeDatabaseCurrentlyUse) { using (SqlCommand command = new SqlCommand($"USE {DBCurrentlyUsing}", connection)) { command.ExecuteNonQuery(); } }

                    // change back to current connection state or new connect state based on ConnectionOption
                    if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }
                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at fCreateTableInDatabase\nErrorType:{ex.Message}\nError:{ex.Message}");
                }

            }
            
            public static bool fTriggerExistedInDatabase(ref SqlConnection connection, string databaseName, string triggerName, bool? AdreadyCheckDBIsExistedResult = null, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                try
                {
                    // Check the connection state and open it if closed.
                    var currentConnectionState = connection.State;
                    if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                    // Check db existence
                    bool dbIsExited = AdreadyCheckDBIsExistedResult ?? fDatabaseExisted(ref connection, databaseName);
                    if (!dbIsExited) { throw new ArgumentException($"{databaseName} not existed"); }

                    // Check table existed
                    string checkTriggerQuery = $"SELECT COUNT(*) FROM {databaseName}.sys.triggers WHERE name = '{triggerName}'";
                    int triggerIsExisted = 0;
                    using (SqlCommand command = new SqlCommand(checkTriggerQuery, connection)) { triggerIsExisted = Convert.ToInt32(command.ExecuteScalar()); }

                    // Change back to current connection state or new connect state based on ConnectionOption
                    if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }

                    return triggerIsExisted > 0;

                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at fTriggerExistedInDatabase\nErrorType:{ex.Message}\nError:{ex.Message}");
                }
            }

            public static void fDeleteTriggerInDatabase(ref SqlConnection connection, string databaseName, string triggerName, bool? AdreadyCheckDBIsExistedResult = null, bool? AdreadyCheckTriggerIsExistedResult = null, bool ChangeDatabaseCurrentlyUse = false, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                try
                {
                    // Check the connection state and open it if closed.
                    var currentConnectionState = connection.State;
                    if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                    // Check db existence and trigger existed (will be checked in fTriggerExistedInDatabase)
                    bool triggerIsExisted = AdreadyCheckTriggerIsExistedResult ?? fTriggerExistedInDatabase(ref connection, databaseName, triggerName, AdreadyCheckDBIsExistedResult, HandleSqlConnection.OpenAndKeep);

                    // Change db context:
                    string DBCurrentlyUsing;
                    string queryGetDBCurrentlyUsing = $"SELECT DB_NAME()";
                    using (SqlCommand command = new SqlCommand(queryGetDBCurrentlyUsing, connection)) { DBCurrentlyUsing = command.ExecuteScalar().ToString(); }
                    if (queryGetDBCurrentlyUsing != databaseName)
                    {
                        string queryChangeDatabaseConnection = $"USE {databaseName}";
                        using (SqlCommand command = new SqlCommand(queryChangeDatabaseConnection, connection)) { command.ExecuteNonQuery(); }
                    }

                    // return if table not existed
                    if (triggerIsExisted) { Console.WriteLine($"[{databaseName}].[dbo].[{triggerName}] not existed"); return; }

                    // Delete trigger
                    string deleteTriggerQuery = $"DROP TRIGGER {triggerName}"; ;
                    using (SqlCommand command = new SqlCommand(deleteTriggerQuery, connection)) { command.ExecuteScalar(); }

                    // Change back to original db
                    if (!ChangeDatabaseCurrentlyUse) { using (SqlCommand command = new SqlCommand($"USE {DBCurrentlyUsing}", connection)) { command.ExecuteNonQuery(); } }

                    // change back to current connection state or new connect state based on ConnectionOption
                    if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }

                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at fDeleteTriggerInDatabase\nErrorType:{ex.Message}\nError:{ex.Message}");
                }
            }

            public static void fCreateTriggerInDatabase(ref SqlConnection connection, string databaseName, string triggerName, string createTriggerQuery, HandleExistence method = HandleExistence.Delete, bool? AdreadyCheckDBIsExistedResult = null, bool? AdreadyCheckTriggerIsExistedResult = null, bool ChangeDatabaseCurrentlyUse = false, HandleSqlConnection? HandleSqlConnenctionOption = null)
            {
                try
                {
                    // Check the connection state and open it if closed.
                    var currentConnectionState = connection.State;
                    if (currentConnectionState == ConnectionState.Closed) { connection.Open(); }

                    // Check db existence and trigger existed (will be checked in fTriggerExistedInDatabase)
                    bool triggerIsExisted = AdreadyCheckTriggerIsExistedResult ?? fTriggerExistedInDatabase(ref connection, databaseName, triggerName, AdreadyCheckDBIsExistedResult, HandleSqlConnection.OpenAndKeep);

                    // Change db context:
                    string DBCurrentlyUsing;
                    string queryGetDBCurrentlyUsing = $"SELECT DB_NAME()";
                    using (SqlCommand command = new SqlCommand(queryGetDBCurrentlyUsing, connection)) { DBCurrentlyUsing = command.ExecuteScalar().ToString(); }
                    if (queryGetDBCurrentlyUsing != databaseName)
                    {
                        string queryChangeDatabaseConnection = $"USE {databaseName}";
                        using (SqlCommand command = new SqlCommand(queryChangeDatabaseConnection, connection)) { command.ExecuteNonQuery(); }
                    }

                    // Delete or Trucate existed table
                    if (triggerIsExisted)
                    {
                        switch (method)
                        {
                            case HandleExistence.DoNothing:
                                Console.WriteLine($"[{databaseName}].[{triggerName}] existed and how to handle existed is DoNothing so there aren't action to take");
                                return;
                            case HandleExistence.Truncate:
                                throw new ArgumentException("Can not truncate trigger");
                            case HandleExistence.Delete:
                                string deleteTriggerQuery = $"DROP TRIGGER {triggerName}"; ;
                                using (SqlCommand command = new SqlCommand(deleteTriggerQuery, connection)) { command.ExecuteScalar(); }
                                break;
                        }
                    }
                    // Create trigger
                    using (SqlCommand command = new SqlCommand(createTriggerQuery, connection)) { command.ExecuteScalar(); }

                    // Change back to original db
                    if (!ChangeDatabaseCurrentlyUse) { using (SqlCommand command = new SqlCommand($"USE {DBCurrentlyUsing}", connection)) { command.ExecuteNonQuery(); } }

                    // change back to current connection state or new connect state based on ConnectionOption
                    if ((!HandleSqlConnenctionOption.HasValue && currentConnectionState == ConnectionState.Closed) || (HandleSqlConnenctionOption == HandleSqlConnection.OpenAndClose)) { connection.Close(); }

                }
                catch (Exception ex)
                {
                    throw new Exception($"Error at fCreateTriggerInDatabase\nErrorType:{ex.Message}\nError:{ex.Message}");
                }
            }
        }
        public void Main()
		{
            try
            {
                // TODO: Add your code here
                // > Specified variables:
                string configFilePath = @"D:\BI\DATH\Config.xml";
                // > Script:

                // >> Load Condfig
                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.Load(configFilePath);
                string connectionString = xmlDoc.SelectSingleNode("/Root/SQLServerConnnectionString").InnerText;
                XmlNodeList databaseNodes = xmlDoc.SelectNodes("/Root/Databases/Database");


                HandleExistence DatabaseExistenceHandleMethod = UnityFunction.fFormatExistedHandler(xmlDoc.SelectSingleNode("/Root/HandleExistedMethod/Database").InnerText);
                HandleExistence DatabaseTableExistenceHandleMethod = UnityFunction.fFormatExistedHandler(xmlDoc.SelectSingleNode("/Root/HandleExistedMethod/Table").InnerText);
                HandleExistence DatabaseTriggerExistenceHandleMethod = UnityFunction.fFormatExistedHandler(xmlDoc.SelectSingleNode("/Root/HandleExistedMethod/Trigger").InnerText);

                // >> Handle:
                SqlConnection connection = new SqlConnection(connectionString);

                //UnityFunction.fDeleteTableFunc(ref connection, "AdventureWorks2012", "product", " ", HandleExistence.Delete);

                foreach (XmlNode databaseNode in databaseNodes)
                {
                    string databaseName = databaseNode.SelectSingleNode("Name").InnerText;

                    if (connection.State != ConnectionState.Open) connection.Open();
                    // ---- CREATE DATABASE ----:
                    // CREATE DATABASE - step 1: check db existence
                    bool databaseExisted = UnityFunction.fDatabaseExisted(ref connection, databaseName);

                    // CREATE DATABASE - step 2: handle existence and create db
                    if (databaseExisted && DatabaseExistenceHandleMethod == HandleExistence.Delete)
                    {
                        // CREATE DATABASE - step 2.1: drop db
                        string queryDBExistenceHandle = $"DROP DATABASE {databaseName}";
                        using (SqlCommand command = new SqlCommand(queryDBExistenceHandle, connection)) { command.ExecuteScalar(); }
                        databaseExisted = false;
                    }
                    // CREATE DATABASE - step 2.2: create db
                    if (!databaseExisted)
                    {
                        string queryDBCreation = $"CREATE DATABASE {databaseName}";
                        using (SqlCommand command = new SqlCommand(queryDBCreation, connection)) { command.ExecuteScalar(); }
                        databaseExisted = true;
                    }

                    // ---- CREATE METATABLE FOR DB ----:
                    XmlNodeList MetaTables = databaseNode.SelectNodes("MetaTables/Table");
                    if (MetaTables != null)
                    {
                        foreach (XmlNode table in MetaTables)
                        {
                            string tableName = table.SelectSingleNode("Name").InnerText;
                            string createTableQuery = table.SelectSingleNode("CreationQuery").InnerText;
                            UnityFunction.fCreateTableInDatabase(ref connection, databaseName, tableName, createTableQuery, DatabaseTableExistenceHandleMethod, true, false, true, HandleSqlConnection.OpenAndKeep);
                        }
                    }
                    // ---- CREATE TRIGGER FOR DB ----:
                    XmlNodeList Triggers = databaseNode.SelectNodes("TriggerOnDatabase/Trigger");
                    if (Triggers != null)
                    {
                        foreach (XmlNode trigger in Triggers)
                        {
                            string tableName = trigger.SelectSingleNode("Name").InnerText;
                            string createTriggerQuery = trigger.SelectSingleNode("CreationQuery").InnerText;
                            UnityFunction.fCreateTriggerInDatabase(ref connection, databaseName, tableName, createTriggerQuery, DatabaseTriggerExistenceHandleMethod, true, false, true, HandleSqlConnection.OpenAndKeep);
                        }
                    }
                    // ---- CREATE TABLE FOR DB ----:
                    XmlNodeList Tables = databaseNode.SelectNodes("Tables/Table");
                    if (Tables != null)
                    {
                        foreach (XmlNode table in Tables)
                        {
                            string tableName = table.SelectSingleNode("Name").InnerText;
                            string createTableQuery = table.SelectSingleNode("CreationQuery").InnerText;
                            UnityFunction.fCreateTableInDatabase(ref connection, databaseName, tableName, createTableQuery, DatabaseTableExistenceHandleMethod, true, false, true, HandleSqlConnection.OpenAndKeep);
                        }
                    }
                }
                //Dts.Variables["User::ConfigInfo"].Value = databaseStructure;
                if (connection.State == ConnectionState.Open) { connection.Close(); }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
           }
            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_3c51a2f841134ab69cc114d847bd6b03</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_3c51a2f841134ab69cc114d847bd6b03</msb:DisplayName>
    <msb:ProjectId>{393611F1-E368-4A6E-A256-6DCB70CC79F1}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_3c51a2f841134ab69cc114d847bd6b03.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:Breakpoint Include="d0c45232ab1e4d7aa91bd721f0ac9c4c">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:LineNumber>544</msb:LineNumber>
      <msb:ColumnNumber>17</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Condition>
      </msb:Condition>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_3c51a2f841134ab69cc114d847bd6b03")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_3c51a2f841134ab69cc114d847bd6b03")]
[assembly: AssemblyCopyright("Copyright @  2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_3c51a2f841134ab69cc114d847bd6b03.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_3c51a2f841134ab69cc114d847bd6b03.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_3c51a2f841134ab69cc114d847bd6b03.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAP90dWUAAAAAAAAAAOAAIiALATAAADwAAAAIAAAAAAAAAlsA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAALBaAABPAAAAAGAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAACDsAAAAgAAAAPAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAYAAAAAYAAAA+AAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAARAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADk
WgAAAAAAAEgAAAACAAUARDIAALQnAAABAAAAAAAAAPhZAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswCQAuAwAAAQAAEXIBAABwCnMQAAAKJQZvEQAACiVyLQAA
cG8SAAAKbxMAAAoLJXJvAABwbxQAAAoMJXKhAABwbxIAAApvEwAACigKAAAGDSVy5wAAcG8SAAAK
bxMAAAooCgAABhMEcicBAHBvEgAACm8TAAAKKAoAAAYTBQdzFQAAChMGCG8WAAAKEwc4WQIAABEH
bxcAAAp0EgAAARMIEQhyawEAcG8SAAAKbxMAAAoTCREGbxgAAAoXLgcRBm8ZAAAKEgYRCRIO/hUB
AAAbEQ4oCwAABhMKEQosMgkYMy5ydQEAcBEJKBoAAAoRBnMbAAAKEw8RD28cAAAKJt4MEQ8sBxEP
bx0AAArcFhMKEQotLnKTAQBwEQkoGgAAChEGcxsAAAoTEBEQbxwAAAom3gwRECwHERBvHQAACtwX
EwoRCHK1AQBwbxQAAAoTCxELLHwRC28WAAAKExErURERbxcAAAp0EgAAASVyawEAcG8SAAAKbxMA
AAoTEnLXAQBwbxIAAApvEwAAChMTEgYRCRESERMRBBdzHgAAChZzHgAAChcXcx8AAAooDgAABhER
byAAAAotpt4VERF1FQAAARMUERQsBxEUbx0AAArcEQhy8wEAcG8UAAAKEwwRDCx8EQxvFgAAChMR
K1EREW8XAAAKdBIAAAElcmsBAHBvEgAACm8TAAAKExVy1wEAcG8SAAAKbxMAAAoTFhIGEQkRFREW
EQUXcx4AAAoWcx4AAAoXF3MfAAAKKBEAAAYREW8gAAAKLabeFRERdRUAAAETFBEULAcRFG8dAAAK
3BEIcicCAHBvFAAAChMNEQ0sfBENbxYAAAoTEStRERFvFwAACnQSAAABJXJrAQBwbxIAAApvEwAA
ChMXctcBAHBvEgAACm8TAAAKExgSBhEJERcRGBEEF3MeAAAKFnMeAAAKFxdzHwAACigOAAAGERFv
IAAACi2m3hUREXUVAAABExQRFCwHERRvHQAACtwRB28gAAAKOpv9///eFREHdRUAAAETFBEULAcR
FG8dAAAK3BEGbxgAAAoXMwcRBm8hAAAK3gtvIgAACnMjAAAKegIoJAAAChZvJQAACioAAEGsAAAC
AAAA6wAAAAoAAAD1AAAADAAAAAAAAAACAAAAHQEAAAoAAAAnAQAADAAAAAAAAAACAAAAUQEAAF4A
AACvAQAAFQAAAAAAAAACAAAA3wEAAF4AAAA9AgAAFQAAAAAAAAACAAAAbQIAAF4AAADLAgAAFQAA
AAAAAAACAAAAggAAAGwCAADuAgAAFQAAAAAAAAAAAAAAAAAAABYDAAAWAwAACwAAABYAAAEeAigm
AAAKKh4CKCcAAAoqrn4BAAAELR5yQQIAcNADAAACKCgAAApvKQAACnMqAAAKgAEAAAR+AQAABCoa
fgIAAAQqHgKAAgAABCoafgMAAAQqHgIoKwAACioucwgAAAaAAwAABCoAABswBABsAAAAAgAAEQJv
LAAAChAAAnKzAgBwKC0AAAotHAJyxwIAcCgtAAAKLRMCctkCAHAoLQAACi0KKwwWCt41FwreMRgK
3i1y5wIAcHMuAAAKegtyEQMAcAdvIgAACnJZAwBwB28iAAAKKC8AAApzIwAACnoGKgEQAAAAAAAA
SEgAIhYAAAEbMAQAoQAAAAMAABECUG8YAAAKCgYtBwJQbxkAAApyaQMAcANyzQMAcCgwAAAKFgsC
UHMbAAAKDAhvHAAACqUtAAABC94KCCwGCG8dAAAK3A8CKDEAAAotAwYsGgQNFhMEEgMoMgAAChEE
/gESAygxAAAKXywHAlBvIQAACgcW/gITBd4lEwZy0QMAcBEGbyIAAApyWQMAcBEGbyIAAAooLwAA
CnMjAAAKehEFKgAAAAEcAAACACwADjoACgAAAAAAAAAAeXkAJRYAAAEbMAQA+AAAAAQAABECUG8Y
AAAKCgYtBwJQbxkAAAoFDBICKDMAAAotEgIDEgP+FQEAABsJKAsAAAYrBxICKDQAAAotEQNyGwQA
cCgaAAAKcy4AAAp6G40mAAABJRZyNQQAcKIlFwOiJRhyYQQAcKIlGQSiJRpyzQMAcKIoNQAAChYL
AlBzGwAAChMEEQRvHAAACig2AAAKC94MEQQsBxEEbx0AAArcDwQoMQAACi0DBiwbDgQNFhMFEgMo
MgAAChEF/gESAygxAAAKXywHAlBvIQAACgcW/gITBt4lEwdywQQAcBEHbyIAAApyWQMAcBEHbyIA
AAooLwAACnMjAAAKehEGKgEcAAACAH8AD44ADAAAAAAAAAAA0NAAJRYAAAEbMAUAcgIAAAUAABEC
UG8YAAAKCgYtBwJQbxkAAAoOBRMHEgcoMwAACi0SAgMEDgQXcx8AAAooDAAABisHEgcoNAAACgty
GQUAcA0JAlBzGwAAChMIEQhvHAAACm83AAAKDN4MEQgsBxEIbx0AAArcCQMoOAAACiwqcjsFAHAD
KBoAAAoCUHMbAAAKEwkRCW85AAAKJt4MEQksBxEJbx0AAArcByw1G40mAAABJRZyRQUAcKIlFwOi
JRhySQUAcKIlGQSiJRpyXQUAcKIoNQAACig6AAAK3aIBAABzOwAAChMEczwAAAoTBREFBG89AAAK
OJUAAAARBW8+AAAKEwoRBBEKbz8AAApyeQUAcAJQcxsAAAoTCxELb0AAAApyZA4AcARvQQAACiYR
C29CAAAKEwwrMhEMcnoOAHBvQwAACm83AAAKEw0RBBENb0QAAAotFBEFEQ1vRQAACi0JEQURDW89
AAAKEQxvRgAACi3F3gwRDCwHEQxvHQAACtzeDBELLAcRC28dAAAK3BEFb0cAAAoWPV7///8FLAdy
jg4AcCsFcqgOAHAlLQYmcsgOAHATBhEEb0gAAAoXWRMOKzURBhEEEQ5vSQAACigaAAAKAlBzGwAA
ChMPEQ9vHAAACibeDBEPLAcRD28dAAAK3BEOF1kTDhEOFi/GDgYtKnI7BQBwCCgaAAAKAlBzGwAA
ChMQERBvOQAACibeDBEQLAcREG8dAAAK3A8HKDEAAAotAwYsHA4HExEWExISESgyAAAKERL+ARIR
KDEAAApfLAcCUG8hAAAK3iUTE3LKDgBwERNvIgAACnJZAwBwERNvIgAACigvAAAKcyMAAAp6KgAA
QawAAAIAAABJAAAADwAAAFgAAAAMAAAAAAAAAAIAAACBAAAACgAAAIsAAAAMAAAAAAAAAAIAAAAm
AQAAPwAAAGUBAAAMAAAAAAAAAAIAAAAKAQAAaQAAAHMBAAAMAAAAAAAAAAIAAADMAQAACgAAANYB
AAAMAAAAAAAAAAIAAAAFAgAACgAAAA8CAAAMAAAAAAAAAAAAAAAAAAAATAIAAEwCAAAlAAAAFgAA
ARswCAD0AQAABgAAEQJQbxgAAAoKBi0HAlBvGQAACg4GEwQSBCgzAAAKLRICAwQOBRdzHwAACigM
AAAGKwcSBCg0AAAKC3IZBQBwDQkCUHMbAAAKEwURBW8cAAAKbzcAAAoM3gwRBSwHEQVvHQAACtwJ
Ayg4AAAKLCpyOwUAcAMoGgAACgJQcxsAAAoTBhEGbzkAAAom3gwRBiwHEQZvHQAACtwHObIAAAAO
BEUDAAAABQAAADoAAACHAAAAOJoAAAAbjSYAAAElFnJFBQBwoiUXA6IlGHIgDwBwoiUZBKIlGnIo
DwBwoig1AAAKKDoAAArdCQEAAAIDBBYOBQdzHgAAChYXcx8AAAooDQAABhuNJgAAASUWckUFAHCi
JRcDoiUYciAPAHCiJRkEoiUacskPAHCiKDUAAAooOgAACt28AAAAAgMEFw4FB3MeAAAKFhdzHwAA
CigNAAAGBQJQcxsAAAoTBxEHbxwAAAom3gwRBywHEQdvHQAACtwOBy0qcjsFAHAIKBoAAAoCUHMb
AAAKEwgRCG85AAAKJt4MEQgsBxEIbx0AAArcDwgoMQAACi0DBiwcDggTCRYTChIJKDIAAAoRCv4B
EgkoMQAACl8sBwJQbyEAAAreJRMLcvMPAHARC28iAAAKclkDAHARC28iAAAKKC8AAApzIwAACnoq
QXwAAAIAAABJAAAADwAAAFgAAAAMAAAAAAAAAAIAAACBAAAACgAAAIsAAAAMAAAAAAAAAAIAAABZ
AQAACgAAAGMBAAAMAAAAAAAAAAIAAACHAQAACgAAAJEBAAAMAAAAAAAAAAAAAAAAAAAAzgEAAM4B
AAAlAAAAFgAAARswBAD4AAAABAAAEQJQbxgAAAoKBi0HAlBvGQAACgUMEgIoMwAACi0SAgMSA/4V
AQAAGwkoCwAABisHEgIoNAAACi0RA3IbBABwKBoAAApzLgAACnobjSYAAAElFnI1BABwoiUXA6Il
GHJJEABwoiUZBKIlGnLNAwBwoig1AAAKFgsCUHMbAAAKEwQRBG8cAAAKKDYAAAoL3gwRBCwHEQRv
HQAACtwPBCgxAAAKLQMGLBsOBA0WEwUSAygyAAAKEQX+ARIDKDEAAApfLAcCUG8hAAAKBxb+AhMG
3iUTB3KDEABwEQdvIgAACnJZAwBwEQdvIgAACigvAAAKcyMAAAp6EQYqARwAAAIAfwAPjgAMAAAA
AAAAAADQ0AAlFgAAARswBQB9AQAABgAAEQJQbxgAAAoKBi0HAlBvGQAACg4EEwQSBCgzAAAKLREC
AwQFF3MfAAAKKA8AAAYrBxIEKDQAAAoLchkFAHANCQJQcxsAAAoTBREFbxwAAApvNwAACgzeDBEF
LAcRBW8dAAAK3AkDKDgAAAosKnI7BQBwAygaAAAKAlBzGwAAChMGEQZvOQAACibeDBEGLAcRBm8d
AAAK3AcsNRuNJgAAASUWckUFAHCiJRcDoiUYckkFAHCiJRkEoiUacl0FAHCiKDUAAAooOgAACt2u
AAAAct8QAHAEKBoAAAoCUHMbAAAKEwcRB28cAAAKJt4MEQcsBxEHbx0AAArcDgUtKnI7BQBwCCga
AAAKAlBzGwAAChMIEQhvOQAACibeDBEILAcRCG8dAAAK3A8GKDEAAAotAwYsHA4GEwkWEwoSCSgy
AAAKEQr+ARIJKDEAAApfLAcCUG8hAAAK3iUTC3L7EABwEQtvIgAACnJZAwBwEQtvIgAACigvAAAK
cyMAAAp6KgAAAEF8AAACAAAASAAAAA8AAABXAAAADAAAAAAAAAACAAAAgAAAAAoAAACKAAAADAAA
AAAAAAACAAAA4gAAAAoAAADsAAAADAAAAAAAAAACAAAAEAEAAAoAAAAaAQAADAAAAAAAAAAAAAAA
AAAAAFcBAABXAQAAJQAAABYAAAEbMAUAvgEAAAcAABECUG8YAAAKCgYtBwJQbxkAAAoOBhMEEgQo
MwAACi0SAgMEDgUXcx8AAAooDwAABisHEgQoNAAACgtyGQUAcA0JAlBzGwAAChMFEQVvHAAACm83
AAAKDN4MEQUsBxEFbx0AAArcCQMoOAAACiwqcjsFAHADKBoAAAoCUHMbAAAKEwYRBm85AAAKJt4M
EQYsBxEGbx0AAArcByx/DgRFAwAAAAIAAAA3AAAAQgAAACtqG40mAAABJRZyRQUAcKIlFwOiJRhy
IA8AcKIlGQSiJRpyKA8AcKIoNQAACig6AAAK3dkAAAByVREAcHMuAAAKenLfEABwBCgaAAAKAlBz
GwAAChMHEQdvHAAACibeDBEHLAcRB28dAAAK3AUCUHMbAAAKEwgRCG8cAAAKJt4MEQgsBxEIbx0A
AArcDgctKnI7BQBwCCgaAAAKAlBzGwAAChMJEQlvOQAACibeDBEJLAcRCW8dAAAK3A8IKDEAAAot
AwYsHA4IEwoWEwsSCigyAAAKEQv+ARIKKDEAAApfLAcCUG8hAAAK3iUTDHKHEQBwEQxvIgAACnJZ
AwBwEQxvIgAACigvAAAKcyMAAAp6KgAAQZQAAAIAAABJAAAADwAAAFgAAAAMAAAAAAAAAAIAAACB
AAAACgAAAIsAAAAMAAAAAAAAAAIAAAADAQAACgAAAA0BAAAMAAAAAAAAAAIAAAAjAQAACgAAAC0B
AAAMAAAAAAAAAAIAAABRAQAACgAAAFsBAAAMAAAAAAAAAAAAAAAAAAAAmAEAAJgBAAAlAAAAFgAA
AUJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAFAIAAAjfgAAvAgAALAJAAAjU3Ry
aW5ncwAAAABsEgAA5BEAACNVUwBQJAAAEAAAACNHVUlEAAAAYCQAAFQDAAAjQmxvYgAAAAAAAAAC
AAABVx2iCQkDAAAA+gEzABYAAAEAAAAyAAAACQAAABAAAAASAAAAMAAAAEkAAAAhAAAAEAAAAAcA
AAACAAAAAwAAAAQAAAAEAAAAAQAAAAUAAAABAAAABQAAAAAASgUBAAAAAAAGANADQwcGAF8EQwcG
ABwDMAcPALcHAAAGAEkD2AUGALMD2AUGAJQD2AUGAEYE2AUGAPAD2AUGAAkE2AUGAGAD2AUGAHsD
twQKACQE+QQKAMoB+QQOADAJcgUSABQG8AgGAAkHEwgOAAEBcgUGAAEAhgUSALEA8AgGABUBhgUG
AF4GhgUGAI0FhgUGAFoIhgUSAM0CWAAGABQAbQAWAAwAbQASAK4G8AgGAP8CMAcGAM4GYwcGAHsG
wwUWALgCNAUWADADNAUWAOYBrgUGAOQCQwcOAAYJcgUSAAEGaAYGANMEhgUSAKcAaAYKACIF+QQG
AHoBhgUGACEBhgUGAFcJ2AUGAFYGhgUGAB0AhgUGACgJhgUGAEUBhgUSAOoF8AgSAPQG8AgSAKEG
aAYAAAAARwAAAAAAAQABAAEAEACjBSMAOQABAAEAAAAQAGoH0gdhAAEAAwAAARAAAQjSB4kAAwAH
AAIBAAAOBgAAXQAEAAoAAgEAAOAAAABdAAcACgACAQAAvAAAAF0ACwAKAAMAEAAtBgAAYQAOAAoA
AwEAAEUIAABdAA4AEwARAJIFzgERAJ8B0gERANAA1gEGBlAA2gFWgJAC3QFWgIcG3QEGBlAA2gFW
gK0E4QFWgKUC4QFWgN0C4QEGBlAA2gFWgKUC5QFWgN0C5QEGBlAA2gFWgDUI6QFWgH8B6QFQIAAA
AACGAKkFBgABADgkAAAAAIYYIwcGAAEAQCQAAAAAgxgjBwYAAQBIJAAAAACTCMoG7QEBAHQkAAAA
AJMIhwHyAQEAeyQAAAAAkwiTAfcBAQCDJAAAAACWCGEI/QECAIokAAAAAIYYIwcGAAIAkiQAAAAA
kRgpBwICAgCgJAAAAACWAN4GBgICACglAAAAAJYAlgAMAgMA9CUAAAAAlgD+ARoCBgAUJwAAAACW
AEcCLgILAEAqAAAAAJYAMAJKAhMAvCwAAAAAlgAWAhoCHADcLQAAAACWAHcCZwIhAOQvAAAAAJYA
XgJKAigAQCQAAAAAhhgjBwYAMQAAAAEApwQAAAEAyQAAAAEAIgYAAAIAVwEQEAMAOwYAAAEAIgYA
AAIAVwEAAAMATQEQEAQAfwgQEAUAOwYAAAEAIgYAAAIAVwEAAAMATQEQEAQAyQAQEAUAfwgQEAYA
nQgQEAcArwEQEAgAOwYAAAEAIgYAAAIAVwEAAAMATQEAAAQAYAkQEAUAyQAQEAYAfwgQEAcAnQgQ
EAgArwEQEAkAOwYAAAEAIgYAAAIAVwEAAAMAZAEQEAQAfwgQEAUAOwYAAAEAIgYAAAIAVwEAAAMA
ZAEQEAQAfwgQEAUAvggQEAYArwEQEAcAOwYAAAEAIgYAAAIAVwEAAAMAZAEAAAQAgQkQEAUAyQAQ
EAYAfwgQEAcAvggQEAgArwEQEAkAOwYJACMHAQARACMHBgAZACMHCgApACMHEAAxACMHEAA5ACMH
EABBACMHEABJACMHEABRACMHEABZACMHEABhACMHEABpACMHBgDpACMHBgAJASMHFQAZASMHBgAh
ASMHBgAhAY0AEACRAPAASwCRAEUJUQCRAMYHVQCBACMHEAB5ABUHWwCJABIJYAApAa4CZAApAZ4F
BgAxAVMIcAChACMHdgA5AZMGYACpAJ0CBgAUACMHgwAMACMHgwCJADwJiQApAZcCBgCxAAkBUQCx
ACMHEABxAD0IjQBBAeEIAQBxACMHBgDBACMHBgBJATMBkwBJAVMJnADxACMHogARASMHBgAxAQEH
UQAxAZQJsQBhASMHEAAxAVMItwAxAVMI0gAMAJoEiQAMAG0I2QAUAJoEiQAUAG0I2QAxAVMI9gBx
ARsA/ADBANEEUQAxAaAJsQA5AXEJMgF5AXABNgEcACMHBgAkACMHBgAkAIUEgwAkAH0E2QAcAJIA
gwChACYIRwGBAY0ETQGhALwGVQGRAX0FWgEcAAoIXwEkAAoIXwGRAYgAiQAkAB4JMgEcAB4JMgEc
AH0FZQEIABQAvQESABUAvQEIABgAwgEIACAAvQEIACQAwgESACUAvQEIACgAxwESACkAvQEIADAA
vQEIADQAwgEIADkAvQEIADwAvQESAD0AvQEIAEAAwgESAEEAvQECAEUAzAESAEkAvQEIAF0AwgES
AGEAvQESAGUAvQECAGkAzAESAG0AvQESAH0AvQESAIEAvQESAJEAvQESAJUAvQECAJkAzAESAJ0A
vQEIALEAxwESALUAvQESALkAvQECAL0AzAESAMEAvQEpAHMAuAIuAAsAkAIuABMAmQIuABsAuAIu
ACMAwQIuACsA6gIuADMA6gIuADsA6gIuAEMAwQIuAEsA8AIuAFMA6gIuAFsABwNDAGMAwgFJAHMA
uAJhAHsAwgFjAGsAwgEcAKoAvwDeAAEBawGKAQMAAQAEAAMAAADOBoECAACnAYYCAAB3CIsCAgAE
AAMAAgAFAAUAAQAGAAUAAgAHAAcAaQB9ADsBQQEEgAAAAQAAACgi92sAAAAAAAAjAAAABAAAAAAA
AAAAAAAAqwFkAAAAAAAQAAAAAAAAAAAAAAC0AdoEAAAAAAQAAAAAAAAAAAAAAKsBcgUAAAAABAAA
AAAAAAAAAAAAqwFYAAAAAAAEAAAAAAAAAAAAAACrAYYFAAAAAAAAAAABAAAAdAcAAAUAAgAGAAIA
BwACAAgAAgAJAAIAAAAATnVsbGFibGVgMQBRdWV1ZWAxAExpc3RgMQBUb0ludDMyAFNUXzNjNTFh
MmY4NDExMzRhYjY5Y2MxMTRkODQ3YmQ2YjAzADxNb2R1bGU+AHZhbHVlX18AU3lzdGVtLkRhdGEA
bXNjb3JsaWIAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMAUmVhZABMb2FkAEFkZABmRGF0YWJh
c2VFeGlzdGVkAERiQ29tbWFuZABTcWxDb21tYW5kAERlbGV0ZU1ldGhvZABtZXRob2QAZGVmYXVs
dEluc3RhbmNlAEhhbmRsZUV4aXN0ZW5jZQBTZWxlY3RTaW5nbGVOb2RlAFhtbE5vZGUAZ2V0X01l
c3NhZ2UASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQ29u
c29sZQB0YWJsZU5hbWUAZGF0YWJhc2VOYW1lAHRyaWdnZXJOYW1lAFdyaXRlTGluZQBUeXBlAEZh
aWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAENoYW5nZURhdGFi
YXNlQ3VycmVudGx5VXNlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNl
dHRpbmdzQmFzZQBmVGFibGVFeGlzdGVkSW5EYXRhYmFzZQBmVHJpZ2dlckV4aXN0ZWRJbkRhdGFi
YXNlAGZDcmVhdGVUYWJsZUluRGF0YWJhc2UAZkRlbGV0ZVRhYmxlSW5EYXRhYmFzZQBmQ3JlYXRl
VHJpZ2dlckluRGF0YWJhc2UAZkRlbGV0ZVRyaWdnZXJJbkRhdGFiYXNlAE9wZW5BbmRDbG9zZQBE
aXNwb3NlAFRydW5jYXRlAGdldF9TdGF0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb25uZWN0aW9u
U3RhdGUARGVsZXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNv
ZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUA
QXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRG
cmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5
RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3Nl
bWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1Njcmlw
dFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1l
Q29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBEZXF1ZXVlAEVucXVldWUAQWRkV2l0aFZhbHVlAGdldF9I
YXNWYWx1ZQB2YWx1ZQBEb05vdGhpbmcAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmlu
ZwBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
VGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwA
U1RfM2M1MWEyZjg0MTEzNGFiNjljYzExNGQ4NDdiZDZiMDMuZGxsAFN5c3RlbS5YbWwAZ2V0X0l0
ZW0AU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AT3BlbgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1
cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAFNxbFBhcmFtZXRl
ckNvbGxlY3Rpb24ARGJDb25uZWN0aW9uAEhhbmRsZVNxbENvbm5lY3Rpb24AY29ubmVjdGlvbgBV
bml0eUZ1bmN0aW9uAEhhbmRsZVNxbENvbm5lbmN0aW9uT3B0aW9uAEFyZ3VtZW50RXhjZXB0aW9u
AFN5c3RlbS5EYXRhLkNvbW1vbgBDdWx0dXJlSW5mbwBPcGVuQW5kS2VlcABFeGVjdXRlU2NhbGFy
AERiRGF0YVJlYWRlcgBTcWxEYXRhUmVhZGVyAEV4ZWN1dGVSZWFkZXIAZ2V0X1Jlc291cmNlTWFu
YWdlcgBmRm9ybWF0RXhpc3RlZEhhbmRsZXIAU3FsUGFyYW1ldGVyAFRvTG93ZXIASUVudW1lcmF0
b3IAR2V0RW51bWVyYXRvcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5S
dW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF8zYzUxYTJmODQxMTM0
YWI2OWNjMTE0ZDg0N2JkNmIwMy5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdn
aW5nTW9kZXMAU2VsZWN0Tm9kZXMAU1RfM2M1MWEyZjg0MTEzNGFiNjljYzExNGQ4NDdiZDZiMDMu
UHJvcGVydGllcwBTZXR0aW5ncwBDb250YWlucwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0X1BhcmFt
ZXRlcnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMAQ29uY2F0AE9iamVjdABnZXRfRGVm
YXVsdABHZXRWYWx1ZU9yRGVmYXVsdABBZHJlYWR5Q2hlY2tEQklzRXhpc3RlZFJlc3VsdABBZHJl
YWR5Q2hlY2tUYWJsZUlzRXhpc3RlZFJlc3VsdABBZHJlYWR5Q2hlY2tUcmlnZ2VySXNFeGlzdGVk
UmVzdWx0AHNldF9UYXNrUmVzdWx0AFN5c3RlbS5EYXRhLlNxbENsaWVudABYbWxEb2N1bWVudABn
ZXRfQ3VycmVudABnZXRfQ291bnQAQ29udmVydABYbWxOb2RlTGlzdABNb3ZlTmV4dABnZXRfSW5u
ZXJUZXh0AGdldF9Bc3NlbWJseQBjcmVhdGVUYWJsZVF1ZXJ5AEV4ZWN1dGVOb25RdWVyeQBjcmVh
dGVUcmlnZ2VyUXVlcnkAb3BfRXF1YWxpdHkAb3BfSW5lcXVhbGl0eQAAAAArRAA6AFwAQgBJAFwA
RABBAFQASABcAEMAbwBuAGYAaQBnAC4AeABtAGwAAEEvAFIAbwBvAHQALwBTAFEATABTAGUAcgB2
AGUAcgBDAG8AbgBuAG4AZQBjAHQAaQBvAG4AUwB0AHIAaQBuAGcAADEvAFIAbwBvAHQALwBEAGEA
dABhAGIAYQBzAGUAcwAvAEQAYQB0AGEAYgBhAHMAZQAARS8AUgBvAG8AdAAvAEgAYQBuAGQAbABl
AEUAeABpAHMAdABlAGQATQBlAHQAaABvAGQALwBEAGEAdABhAGIAYQBzAGUAAD8vAFIAbwBvAHQA
LwBIAGEAbgBkAGwAZQBFAHgAaQBzAHQAZQBkAE0AZQB0AGgAbwBkAC8AVABhAGIAbABlAABDLwBS
AG8AbwB0AC8ASABhAG4AZABsAGUARQB4AGkAcwB0AGUAZABNAGUAdABoAG8AZAAvAFQAcgBpAGcA
ZwBlAHIAAAlOAGEAbQBlAAAdRABSAE8AUAAgAEQAQQBUAEEAQgBBAFMARQAgAAAhQwBSAEUAQQBU
AEUAIABEAEEAVABBAEIAQQBTAEUAIAAAIU0AZQB0AGEAVABhAGIAbABlAHMALwBUAGEAYgBsAGUA
ABtDAHIAZQBhAHQAaQBvAG4AUQB1AGUAcgB5AAAzVAByAGkAZwBnAGUAcgBPAG4ARABhAHQAYQBi
AGEAcwBlAC8AVAByAGkAZwBnAGUAcgAAGVQAYQBiAGwAZQBzAC8AVABhAGIAbABlAABxUwBUAF8A
MwBjADUAMQBhADIAZgA4ADQAMQAxADMANABhAGIANgA5AGMAYwAxADEANABkADgANAA3AGIAZAA2
AGIAMAAzAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAATZABvAG4A
bwB0AGgAaQBuAGcAABF0AHIAdQBuAGMAYQB0AGUAAA1kAGUAbABlAHQAZQAAKW0AZQB0AGgAbwBk
ACAAZABvAGUAcwBuACcAdAAgAGUAeABpAHMAdAABR0UAcgByAG8AcgAgAGEAdAAgAEgAYQBuAGQA
bABlAEUAeABpAHMAdABlAG4AYwBlAAoARQByAHIAbwByAFQAeQBwAGUAOgAADwoARQByAHIAbwBy
ADoAAGNTAEUATABFAEMAVAAgAEMATwBVAE4AVAAoACoAKQAgAEYAUgBPAE0AIABzAHkAcwAuAGQA
YQB0AGEAYgBhAHMAZQBzACAAVwBIAEUAUgBFACAAbgBhAG0AZQAgAD0AIAAnAAEDJwABSUUAcgBy
AG8AcgAgAGEAdAAgAGYARABhAHQAYQBiAGEAcwBlAEUAeABpAHMAdABlAGQACgBFAHIAcgBvAHIA
VAB5AHAAZQA6AAAZIABuAG8AdAAgAGUAeABpAHMAdABlAGQAACtTAEUATABFAEMAVAAgAEMATwBV
AE4AVAAoACoAKQAgAEYAUgBPAE0AIAAAXy4ASQBOAEYATwBSAE0AQQBUAEkATwBOAF8AUwBDAEgA
RQBNAEEALgBUAEEAQgBMAEUAUwAgAFcASABFAFIARQAgAFQAQQBCAEwARQBfAE4AQQBNAEUAIAA9
ACAAJwABV0UAcgByAG8AcgAgAGEAdAAgAGYAVABhAGIAbABlAEUAeABpAHMAdABlAGQASQBuAEQA
YQB0AGEAYgBhAHMAZQAKAEUAcgByAG8AcgBUAHkAcABlADoAACFTAEUATABFAEMAVAAgAEQAQgBf
AE4AQQBNAEUAKAApAAAJVQBTAEUAIAAAA1sAABNdAC4AWwBkAGIAbwBdAC4AWwAAG10AIABuAG8A
dAAgAGUAeABpAHMAdABlAGQAAIjpDQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAUwBFAEwARQBDAFQADQAKACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABmAGsALgBuAGEA
bQBlACAAQQBTACAARgBvAHIAZQBpAGcAbgBLAGUAeQBOAGEAbQBlACwADQAKACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAB0AHAA
LgBuAGEAbQBlACAAQQBTACAAVABhAGIAbABlAE4AYQBtAGUALAANAAoAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAGMAcAAuAG4A
YQBtAGUAIABBAFMAIABDAG8AbAB1AG0AbgBOAGEAbQBlAA0ACgAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEYAUgBPAE0ADQAKACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABz
AHkAcwAuAGYAbwByAGUAaQBnAG4AXwBrAGUAeQBzACAAQQBTACAAZgBrAA0ACgAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEkATgBOAEUAUgAg
AEoATwBJAE4ADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIABzAHkAcwAuAHQAYQBiAGwAZQBzACAAQQBTACAAdABwACAATwBO
ACAAZgBrAC4AcABhAHIAZQBuAHQAXwBvAGIAagBlAGMAdABfAGkAZAAgAD0AIAB0AHAALgBvAGIA
agBlAGMAdABfAGkAZAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIABJAE4ATgBFAFIAIABKAE8ASQBOAA0ACgAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAcwB5AHMALgB0
AGEAYgBsAGUAcwAgAEEAUwAgAHQAcgAgAE8ATgAgAGYAawAuAHIAZQBmAGUAcgBlAG4AYwBlAGQA
XwBvAGIAagBlAGMAdABfAGkAZAAgAD0AIAB0AHIALgBvAGIAagBlAGMAdABfAGkAZAANAAoAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABJAE4A
TgBFAFIAIABKAE8ASQBOAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAcwB5AHMALgBmAG8AcgBlAGkAZwBuAF8AawBlAHkA
XwBjAG8AbAB1AG0AbgBzACAAQQBTACAAZgBrAGMAIABPAE4AIABmAGsALgBvAGIAagBlAGMAdABf
AGkAZAAgAD0AIABmAGsAYwAuAGMAbwBuAHMAdAByAGEAaQBuAHQAXwBvAGIAagBlAGMAdABfAGkA
ZAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIABJAE4ATgBFAFIAIABKAE8ASQBOAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAcwB5AHMALgBjAG8AbAB1AG0AbgBz
ACAAQQBTACAAYwBwACAATwBOACAAZgBrAGMALgBwAGEAcgBlAG4AdABfAGMAbwBsAHUAbQBuAF8A
aQBkACAAPQAgAGMAcAAuAGMAbwBsAHUAbQBuAF8AaQBkACAAQQBOAEQAIABmAGsAYwAuAHAAYQBy
AGUAbgB0AF8AbwBiAGoAZQBjAHQAXwBpAGQAIAA9ACAAYwBwAC4AbwBiAGoAZQBjAHQAXwBpAGQA
DQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAASQBOAE4ARQBSACAASgBPAEkATgANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAHMAeQBzAC4AYwBvAGwAdQBtAG4AcwAg
AEEAUwAgAGMAcgAgAE8ATgAgAGYAawBjAC4AcgBlAGYAZQByAGUAbgBjAGUAZABfAGMAbwBsAHUA
bQBuAF8AaQBkACAAPQAgAGMAcgAuAGMAbwBsAHUAbQBuAF8AaQBkACAAQQBOAEQAIABmAGsAYwAu
AHIAZQBmAGUAcgBlAG4AYwBlAGQAXwBvAGIAagBlAGMAdABfAGkAZAAgAD0AIABjAHIALgBvAGIA
agBlAGMAdABfAGkAZAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIABXAEgARQBSAEUADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAB0AHIALgBuAGEAbQBlACAAPQAg
AEAAVABhAGIAbABlAE4AYQBtAGUAABVAAFQAYQBiAGwAZQBOAGEAbQBlAAATVABhAGIAbABlAE4A
YQBtAGUAABlEAEUATABFAFQARQAgAEYAUgBPAE0AIAAAH1QAUgBVAE4AQwBBAFQARQAgAFQAQQBC
AEwARQAgAAABAFVFAHIAcgBvAHIAIABhAHQAIABmAEQAZQBsAGUAdABlAFQAYQBiAGwAZQBJAG4A
RABhAHQAYQBiAGEAcwBlAAoARQByAHIAbwByAFQAeQBwAGUAOgAAB10ALgBbAACAn10AIABlAHgA
aQBzAHQAZQBkACAAYQBuAGQAIABoAG8AdwAgAHQAbwAgAGgAYQBuAGQAbABlACAAZQB4AGkAcwB0
AGUAZAAgAGkAcwAgAEQAbwBOAG8AdABoAGkAbgBnACAAcwBvACAAdABoAGUAcgBlACAAYQByAGUA
bgAnAHQAIABhAGMAdABpAG8AbgAgAHQAbwAgAHQAYQBrAGUAASldACAAaABhAHMAIABiAGUAZQBu
ACAAdAByAHUAbgBjAGEAdABlAGQAAFVFAHIAcgBvAHIAIABhAHQAIABmAEMAcgBlAGEAdABlAFQA
YQBiAGwAZQBJAG4ARABhAHQAYQBiAGEAcwBlAAoARQByAHIAbwByAFQAeQBwAGUAOgAAOS4AcwB5
AHMALgB0AHIAaQBnAGcAZQByAHMAIABXAEgARQBSAEUAIABuAGEAbQBlACAAPQAgACcAAVtFAHIA
cgBvAHIAIABhAHQAIABmAFQAcgBpAGcAZwBlAHIARQB4AGkAcwB0AGUAZABJAG4ARABhAHQAYQBi
AGEAcwBlAAoARQByAHIAbwByAFQAeQBwAGUAOgAAG0QAUgBPAFAAIABUAFIASQBHAEcARQBSACAA
AFlFAHIAcgBvAHIAIABhAHQAIABmAEQAZQBsAGUAdABlAFQAcgBpAGcAZwBlAHIASQBuAEQAYQB0
AGEAYgBhAHMAZQAKAEUAcgByAG8AcgBUAHkAcABlADoAADFDAGEAbgAgAG4AbwB0ACAAdAByAHUA
bgBjAGEAdABlACAAdAByAGkAZwBnAGUAcgAAWUUAcgByAG8AcgAgAGEAdAAgAGYAQwByAGUAYQB0
AGUAVAByAGkAZwBnAGUAcgBJAG4ARABhAHQAYQBiAGEAcwBlAAoARQByAHIAbwByAFQAeQBwAGUA
OgAAAAAAMH0SU0TEUk6fWHMGuxkBpAAEIAEBCAMgAAEFIAEBEREEIAEBDgYgAQERgIEuBxkODhI9
ERgRGBEYEkESRRJJDgISPRI9Ej0VEU0BERQSURJREkUODhJVDg4ODgUgARJJDgMgAA4FIAESPQ4E
IAASRQMgABwEIAARZQYVEU0BERQFAAIODg4GIAIBDhJBBRURTQECBSABARMAAyAAAgUgABKAoQgA
ARKApRGAqQUgABKArQcgAgEOEoCtBgcCERgSWQUAAgIODgcABA4ODg4OEgcHEWUIElEVEU0BERQR
FAISWQYAAw4ODg4EIAATABcHCBFlCBURTQECFRFNAREUElERFAISWQUAAQ4dDgQAAQgcMAcUEWUC
Dg4VEmkBDhUSbQEODhURTQECElESUQ4SURJxDggSURJRFRFNAREUERQSWQMgAAgEAAEBDgUVEmkB
DgUVEm0BDgUgABKAwQcgAhKAxQ4cBCAAEnEEIAEcDgUgAQITAAUgARMACB4HDBFlAg4OFRFNAQIS
URJRElESURURTQERFBEUElkgBw0RZQIODhURTQECElESURJRElESURURTQERFBEUElkIt3pcVhk0
4IkIiYRdzYCAzJEEAAAAAAQBAAAABAIAAAABAAMGEnkDBhJ9AwYSEAIGCAMGERQDBhEYAwYRHAMG
ESQEAAASeQQAABJ9BQABARJ9BAAAEhADAAABBQABERgODQADAhASQQ4VEU0BERQTAAUCEBJBDg4V
EU0BAhURTQERFBsACAEQEkEODhEcFRFNAQIVEU0BAgIVEU0BERQcAAkBEBJBDg4OERgVEU0BAhUR
TQECAhURTQERFBkABwEQEkEODhURTQECFRFNAQICFRFNAREUBAgAEnkECAASfQQIABIQCAEACAAA
AAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF8zYzUxYTJm
ODQxMTM0YWI2OWNjMTE0ZDg0N2JkNmIwMwAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDIzAABJ
AQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5O
RVQgRnJhbWV3b3JrIDQuNwAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNv
dXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQ
dWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJl
c291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAADYWgAAAAAAAAAAAADyWgAAACAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA5FoAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA
/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAAAAAAAAAA
AAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAGgQAAAAAAAAAAAAA
GgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAABAPdrKCIA
AAEA92soIj8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkA
bgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBHoDAAABAFMAdABy
AGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIAMAAAABoAAQABAEMA
bwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAAAAAABw
ACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMwBjADUAMQBhADIA
ZgA4ADQAMQAxADMANABhAGIANgA5AGMAYwAxADEANABkADgANAA3AGIAZAA2AGIAMAAzAAAAPgAP
AAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADgANwA0ADQALgAyADcANgAzADkA
AAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AMwBjADUAMQBhADIAZgA4
ADQAMQAxADMANABhAGIANgA5AGMAYwAxADEANABkADgANAA3AGIAZAA2AGIAMAAzAC4AZABsAGwA
AABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAg
AEAAIAAgADIAMAAyADMAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAA
AAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwAzAGMANQAx
AGEAMgBmADgANAAxADEAMwA0AGEAYgA2ADkAYwBjADEAMQA0AGQAOAA0ADcAYgBkADYAYgAwADMA
LgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMwBjADUAMQBh
ADIAZgA4ADQAMQAxADMANABhAGIANgA5AGMAYwAxADEANABkADgANAA3AGIAZAA2AGIAMAAzAAAA
QgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA4ADcANAA0AC4AMgA3
ADYAMwA5AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAA
LgA4ADcANAA0AC4AMgA3ADYAMwA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAADAAAAAQ7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="544"
            Column="17" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="230,42"
          Id="Package\Re-SetUp Databases and Tables"
          TopLeft="483,110" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>